<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Liberator.Driver</name>
    </assembly>
    <members>
        <member name="P:Liberator.Driver.BrowserControl.ChromeDriverControl.Options">
            <summary>
            Holds the preset values for Chrome Options
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.ChromeDriverControl.Service">
            <summary>
            The Chrome driver service
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.ChromeDriverControl.LoggingPreferences">
            <summary>
            The performance logging preferences for Chrome
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.ChromeDriverControl.Driver">
            <summary>
            Holds the instantiated Chrome Driver
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.ChromeDriverControl.Touch">
            <summary>
            
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.ChromeDriverControl.#ctor">
            <summary>
            Sets all defaults from specified entries in the app.config file
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.ChromeDriverControl.StartDriver">
            <summary>
            Starts the Chrome Driver with the preset values from app.config
            </summary>
            <returns>An instance of the Chrome Driver</returns>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.ChromeDriverControl.StartMobileDriver(Liberator.Driver.Enums.EnumPhoneType,System.Boolean)">
            <summary>
            Starts a Chrome Mobile Emuation driver
            </summary>
            <param name="phoneType">The type of device to emulate</param>
            <param name="touch">Whether to respond to toucn events</param>
            <returns>An instance of the Chrome Driver set to emulate a particular device</returns>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.ChromeDriverControl.StartMobileDriver(System.Int64,System.Int64,System.String,System.Double,System.Boolean)">
            <summary>
            Starts a specific mobile emulation using  hights and widths
            </summary>
            <param name="height">The height of the screen</param>
            <param name="width">The width of the screen</param>
            <param name="userAgent">The user agent returned by the device</param>
            <param name="pixelRatio">The pixel ratio of the screen</param>
            <param name="touch">Whether to emulate a touch screen</param>
            <returns>A web driver</returns>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.ChromeDriverControl.SetMobileEmulationOptions(Liberator.Driver.Enums.EnumPhoneType,System.Boolean)">
            <summary>
            Sets the mobile emulation settings for the Chrome Driver
            </summary>
            <param name="phoneType">The type of device to emulate</param>
            <param name="touchEvents">Whether to respond to toucn events</param>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.ChromeDriverControl.AddAdditionalCapability(System.String,System.Object)">
            <summary>
            Adds an additional capability to the Chrome Driver
            </summary>
            <param name="name">the name of the capabilitty to add</param>
            <param name="value">The value to set for the capability</param>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.ChromeDriverControl.AddExtension(OpenQA.Selenium.Chrome.ChromeOptions,System.String)">
            <summary>
            Adds an extension to the Chrome Driver
            </summary>
            <param name="options">The Chrome Options object</param>
            <param name="extensionPath">The path to the extension</param>
            <returns>The CHrome Options object</returns>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.ChromeDriverControl.SetOptions">
            <summary>
            Sets the Chrome Options from the app.config file
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.ChromeDriverControl.SetDriverService">
            <summary>
            Sets the Chrome Driver Service setting from the app.config file
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.ChromeDriverControl.SetMobileDriverService">
            <summary>
            Sets the Chrome Mobile Driver Service setting from the app.config file
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.ChromeDriverControl.AddAdditionalCapabilities">
            <summary>
            Adds a series of additional capabilities to the Chrome Options object from the app.config file
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.ChromeDriverControl.AddExtensions">
            <summary>
            Adds an extension to the Chrome Options object from the app.config
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.ChromeDriverControl.AddLocalStatePreferences">
            <summary>
            Add the Local State Preferences from the app.config file
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.ChromeDriverControl.AddUserProfilePreferences">
            <summary>
            Adds the User Profile Preferences from the app.config file
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.ChromeDriverControl.SetDefaultChromeMobileEmulationDeviceSettings">
            <summary>
            Sets the mobile emulation settings for Chrome from the app.config file
            </summary>
            <returns>The Chrome Mobile Emulation Device Settings</returns>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.ChromeDriverControl.SetChromeMobileEmulationDeviceSettings(Liberator.Driver.Enums.EnumPhoneType,System.Boolean)">
            <summary>
            Sets the mobile emulation settings for Chrome
            </summary>
            <param name="phoneType">The type of device to emulate</param>
            <param name="touchEvents">Whether to respond to touch events</param>
            <returns>The Chrome Mobile Emulation Device Settings</returns>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.EdgeDriverControl.Driver">
            <summary>
            Holds the instantiated Edge Driver
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.EdgeDriverControl.Options">
            <summary>
            Holds the preset values for Edge Options
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.EdgeDriverControl.Service">
            <summary>
            The Edge driver service
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.EdgeDriverControl.#ctor">
            <summary>
            Loads preset values for the driver and service from the app.config file
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.EdgeDriverControl.StartDriver">
            <summary>
            Starts the Edge Driver with the preset values from app.config
            </summary>
            <returns>An instance of the Edge Driver</returns>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.EdgeDriverControl.SetEdgeDriverService">
            <summary>
            Sets the Chrome Driver Service setting from the app.config file
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.FirefoxDriverControl.BinaryPath">
            <summary>
            The path to the Firefox binary
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.FirefoxDriverControl.BrowserLoadTimeout">
            <summary>
            The maximum time to wait for the browser to load
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.FirefoxDriverControl.CommandTimeout">
            <summary>
            The maximum amount of time to wait between commands
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.FirefoxDriverControl.FirefoxBinary">
            <summary>
            The Firefox binary
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.FirefoxDriverControl.Profile">
            <summary>
            Holds a firefox profile
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.FirefoxDriverControl.Options">
            <summary>
            Holds the preset values for Firefox Options
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.FirefoxDriverControl.Service">
            <summary>
            The Firefox driver service
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.FirefoxDriverControl.ProxySettings">
            <summary>
            Holds the proxy settings for connection to the Firefox driver
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.FirefoxDriverControl.Driver">
            <summary>
            IWebDriver
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.FirefoxDriverControl.#ctor">
            <summary>
            Loads all settings into memory for the Firefox Driver from the app.config file
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.FirefoxDriverControl.StartDriver">
            <summary>
            Starts the Firefox Driver with the preset values from app.config
            </summary>
            <returns>An instance of the Firefox Driver</returns>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.FirefoxDriverControl.StartDriverSavedProfile(System.String)">
            <summary>
            Starting the Firefox Driver with a specified profile from the profile manager.
            This requires that the profile has been loaded into the Profile Manager of the local machine.
            </summary>
            <param name="profileName">The name of the firefox profile to load</param>
            <returns>An initialised Firefox Driver</returns>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.FirefoxDriverControl.StartDriverLoadProfileFromDisk(System.String,System.Boolean)">
            <summary>
            Starting the Firefox Driver with a specified profile
            </summary>
            <param name="profileDirectory">The directory in which to find the firefox profile</param>
            <param name="cleanDirectory">Whether to delete the source on clean</param>
            <returns>An initialised Firefox Driver</returns>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.FirefoxDriverControl.AddExtension(System.String)">
            <summary>
            Adds an extension to the current Firefox profile by name
            </summary>
            <param name="extensionName">The name of extension</param>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.FirefoxDriverControl.SetBaseSettings">
            <summary>
            Sets the basic settings, including timeouts, in the Firefox Driver
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.FirefoxDriverControl.SetOptions">
            <summary>
            Sets the Firefox Options from the app.config file
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.FirefoxDriverControl.CreateBasicProfile">
            <summary>
            Loads the basic firefox profile settings from the app.config file
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.FirefoxDriverControl.SetProxyPreferences">
            <summary>
            Sets the proxy preferences for Firefox from the app.config file
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.FirefoxDriverControl.SetDriverService">
            <summary>
            Sets the Firefox Driver Service setting from the app.config file
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.FirefoxDriverControl.AddPreferencesToFirefoxProfile">
            <summary>
            Adds the list of preferences to the Firefox profile from the app.config file
            </summary>
        </member>
        <member name="T:Liberator.Driver.BrowserControl.IBrowserControl">
            <summary>
            Root interface for browser control classes
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.IBrowserControl.Driver">
            <summary>
            Driver implementation under test
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.IBrowserControl.StartDriver">
            <summary>
            Starts a web driver
            </summary>
            <returns>A web driver instance</returns>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.InternetExplorerDriverControl.Options">
            <summary>
            Holds the preset values for Internet Explorer Options
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.InternetExplorerDriverControl.Service">
            <summary>
            The Internet Explorer driver service
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.InternetExplorerDriverControl.Driver">
            <summary>
            Holds the instantiated Internet Explorer Driver
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.InternetExplorerDriverControl.SleepInterval">
            <summary>
            The maximum sleep intervall
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.InternetExplorerDriverControl.BrowserTimeout">
            <summary>
            The maximum time to wait for the browser to load
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.InternetExplorerDriverControl.CommandTimeout">
            <summary>
            The maximum amount of time to wait between commands
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.InternetExplorerDriverControl.#ctor">
            <summary>
            Loads the settings from the app.config file
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.InternetExplorerDriverControl.StartDriver">
            <summary>
             Starts the Internet Explorer Driver with the preset values from app.config
            </summary>
            <returns>An instance of the Internet Explorer driver</returns>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.InternetExplorerDriverControl.SetInternetExplorerOptions">
            <summary>
            Sets the Internet Explorer Options from the app.config file
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.InternetExplorerDriverControl.SetInternetExplorerDriverService">
            <summary>
            Sets the Internet Explorer Driver Service setting from the app.config file
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.OperaDriverControl.Options">
            <summary>
            Holds the preset values for Opera Options
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.OperaDriverControl.Service">
            <summary>
            The Internet Explorer driver service
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.OperaDriverControl.Driver">
            <summary>
            Holds the instantiated Opera Driver
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.OperaDriverControl.CommandTimeout">
            <summary>
            The maximum amount of time to wait between commands
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.OperaDriverControl.#ctor">
            <summary>
            Loads the settings from the app.config file
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.OperaDriverControl.StartDriver">
            <summary>
             Starts the Opera Driver with the preset values from app.config
            </summary>
            <returns>An instance of the Opera driver</returns>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.OperaDriverControl.SetOperaOptions">
            <summary>
            Sets the Opera Options from the app.config file
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.OperaDriverControl.SetOperaDriverService">
            <summary>
            Sets the Opera Driver Service setting from the app.config file
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.RemoteDriverControl.Driver">
            <summary>
            Holds the instantiated Phantom JS Driver
            </summary>
        </member>
        <member name="P:Liberator.Driver.BrowserControl.RemoteDriverControl.CommandTimeout">
            <summary>
            The maximum amount of time to wait between commands
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.RemoteDriverControl.#ctor">
            <summary>
            The constructor
            </summary>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.RemoteDriverControl.StartDriver">
            <summary>
            Starts the Remote Web Driver
            </summary>
            <returns>The instantiated Remote WebDriver</returns>
        </member>
        <member name="M:Liberator.Driver.BrowserControl.RemoteDriverControl.StartRemoteDriver(Liberator.Driver.Enums.EnumRemoteDriver)">
            <summary>
            
            </summary>
            <param name="driverType"></param>
            <returns></returns>
        </member>
        <member name="T:Liberator.Driver.Enums.EnumConsoleDebugLevel">
            <summary>
            Level of debugging to use during testing
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumConsoleDebugLevel.NotSpecified">
            <summary>
            No level specified
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumConsoleDebugLevel.Human">
            <summary>
            Human readable text
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumConsoleDebugLevel.Message">
            <summary>
            Includes the exception message
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumConsoleDebugLevel.StackTrace">
            <summary>
            Includes the whole stack trace
            </summary>
        </member>
        <member name="T:Liberator.Driver.Enums.EnumDriverType">
            <summary>
            A list of driver types
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumDriverType.NotSpecified">
            <summary>
            Driver not specified
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumDriverType.FirefoxDriver">
            <summary>
            Firefox web driver
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumDriverType.ChromeDriver">
            <summary>
            Chrome web driver
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumDriverType.EdgeDriver">
            <summary>
            Edge web driver
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumDriverType.InternetExplorerDriver">
            <summary>
            Internet Explorer web driver
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumDriverType.OperaDriver">
            <summary>
            Opera web driver
            </summary>
        </member>
        <member name="T:Liberator.Driver.Enums.EnumRemoteDriver">
            <summary>
            Type of remote web driver
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumRemoteDriver.NotSpecified">
            <summary>
            No web driver specified
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumRemoteDriver.Android">
            <summary>
            Android web driver
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumRemoteDriver.Chrome">
            <summary>
            Chrome web driver
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumRemoteDriver.Edge">
            <summary>
            Edge web driver
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumRemoteDriver.Firefox">
            <summary>
            Firefox web driver
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumRemoteDriver.HTMLUnit">
            <summary>
            HTML Unit web driver
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumRemoteDriver.HTMLUnitJS">
            <summary>
            HTML Unit web driver with JavaScript
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumRemoteDriver.InternetExplorer">
            <summary>
            internet Explorer web driver
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumRemoteDriver.iPad">
            <summary>
            iPad emulation web driver
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumRemoteDriver.iPhone">
            <summary>
            iPhone emulation web driver
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumRemoteDriver.Opera">
            <summary>
            Opera web driver
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumRemoteDriver.PhantomJS">
            <summary>
            PhantomJS web driver
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumRemoteDriver.Safari">
            <summary>
            Safari web driver
            </summary>
        </member>
        <member name="T:Liberator.Driver.Enums.EnumLocatorType">
            <summary>
            Type of locator being used
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumLocatorType.NotSpecified">
            <summary>
            Locator type not specified
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumLocatorType.ClassName">
            <summary>
            Locates using a CSS Class Name
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumLocatorType.CssSelector">
            <summary>
            Locates using a CSS Selector
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumLocatorType.Id">
            <summary>
            Locates using the Id of an HTML element
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumLocatorType.LinkText">
            <summary>
            Locate using text from an anchor tag
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumLocatorType.Name">
            <summary>
            Locates using a Name attribute
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumLocatorType.PartialLinkText">
            <summary>
            Use partial text from an anchor tag
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumLocatorType.TagName">
            <summary>
            Locate using an HTML tag name
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumLocatorType.XPath">
            <summary>
            Use an XPath locator
            </summary>
        </member>
        <member name="T:Liberator.Driver.Enums.EnumPhoneType">
            <summary>
            A list of phone types for emulation
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.NotSpecified">
            <summary>
            Phone type not specified
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.AmazonKindleFireHDX">
            <summary>
            Emulation of an Amazon Kindle Fire HDX 
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.AppleiPhone6Plus">
            <summary>
            Emulation of an iPhone 6+
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.AppleiPhone6">
            <summary>
            Emulation of an iPhone 6
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.AppleiPhone5">
            <summary>
            Emulation of an iPhone 5
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.AppleiPhone4">
            <summary>
            Emulation of an iPhone 4
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.AppleiPad">
            <summary>
            Emulation of an iPad
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.AppleiPadMini">
            <summary>
            Emulation of an iPad Mini
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.AppleiPadPro">
            <summary>
            Emulation of an iPad Pro
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.BlackBerryPlayBook">
            <summary>
            Emulation of a Blackberry Playbook
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.BlackBeryZ30">
            <summary>
            Emulation of a Blackbery Z30
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.GoogleNexus10">
            <summary>
            Emulation of a Nexus 10
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.GoogleNexus7">
            <summary>
            Emulation of a Nexus 7
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.GoogleNexus6">
            <summary>
            Emulation of a Nexus 8
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.GoogleNexus5">
            <summary>
            Emulation of a Nexus 5
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.GoogleNexus4">
            <summary>
            Emulation of a Nexus 4
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.LGOptimusL70">
            <summary>
            Emulation of an LG Optimus L70
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.MicrosoftLumia550">
            <summary>
            Emulation of a Microsoft Lumia 550
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.MicrosoftLumia950">
            <summary>
            Emulation of a Microsoft Lumia 950
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.Nexus5X">
            <summary>
            Emulation of a Nexus 5X
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.Nexus6P">
            <summary>
            Emulation of a Nexus 6P
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.NokiaLumia520">
            <summary>
            Emulation of a Nokia Lumia 520
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.NokiaN9">
            <summary>
            Emulation of a Nokia N9
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.SamsungGalaxyS5">
            <summary>
            Emulation of a Samsung Galaxy S5
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.SamsungGalaxyS3">
            <summary>
            Emulation of a Samsung Galaxy S III
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.SamsungGalaxyNote3">
            <summary>
            Emulation of a Samsung Galaxy Note 3
            </summary>
        </member>
        <member name="F:Liberator.Driver.Enums.EnumPhoneType.SamsungGalaxyNote2">
            <summary>
            Emulation of a Samsung Galaxy Note 2
            </summary>
        </member>
        <member name="T:Liberator.Driver.Helpers">
            <summary>
            
            </summary>
        </member>
        <member name="M:Liberator.Driver.Helpers.SetForegroundWindow(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:Liberator.Driver.Helpers.Activate(Liberator.Driver.IRodent)">
            <summary>
            
            </summary>
            <param name="driver"></param>
        </member>
        <member name="T:Liberator.Driver.IRatDriver`1">
            <summary>
            Provides a base interface for single instance web drivers
            </summary>
            <typeparam name="TWebDriver">The type of web driver to use</typeparam>
        </member>
        <member name="P:Liberator.Driver.IRatDriver`1.Driver">
            <summary>
            The current WebDriver instance
            </summary>
        </member>
        <member name="P:Liberator.Driver.IRatDriver`1.DriverName">
            <summary>
            Text name for the driver
            </summary>
        </member>
        <member name="P:Liberator.Driver.IRatDriver`1.Element">
            <summary>
            The current WebElement under scrutiny
            </summary>
        </member>
        <member name="P:Liberator.Driver.IRatDriver`1.Locator">
            <summary>
            The locator for a WebElement under scrutiny
            </summary>
        </member>
        <member name="P:Liberator.Driver.IRatDriver`1.Elements">
            <summary>
            A list of Elements returned to the user by a query
            </summary>
        </member>
        <member name="P:Liberator.Driver.IRatDriver`1.Locators">
            <summary>
            A list of Locators returned to the user by a query
            </summary>
        </member>
        <member name="P:Liberator.Driver.IRatDriver`1.LastException">
            <summary>
            The last exception thrown by the driver
            </summary>
        </member>
        <member name="P:Liberator.Driver.IRatDriver`1.WindowHandles">
            <summary>
            The current collection of windows by handle
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.HoverOverMenu(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Moves the virtual cursor position to a WebElement which acts as a menu and hovers
            </summary>
            <param name="element">The WebElement acting as a menu</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.HoverOverMenu(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Moves the virtual cursor position to a WebElement which acts as a menu and hovers
            </summary>
            <param name="locator">The locator for the WebElement acting as a menu</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ClickAndHoverOverMenu(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Clicks on a WebElement acting as a menu and continues to hover
            </summary>
            <param name="element">The WebElement acting as a menu</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ClickAndHoverOverMenu(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Clicks on a WebElement acting as a menu and continues to hover
            </summary>
            <param name="locator">The locator for the WebElement acting as a menu</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ClickAndHoldMenu(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Clicks on a WebElement acting as a menu and continues to hold
            </summary>
            <param name="element">The WebElement acting as a menu</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ClickAndHoldMenu(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Clicks on a WebElement acting as a menu and continues to hold
            </summary>
            <param name="locator">The locator for the WebElement acting as a menu</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ClickContextualMenu(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Clicks on an element and displays a contextual menu
            </summary>
            <param name="element">The WebElement which is the target of the contextual menu click</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ClickContextualMenu(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Clicks on an element and displays a contextual menu
            </summary>
            <param name="locator">The locator for the WebElement which is the target of the contextual menu click</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.DoubleClick(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Double clicks on a WebElement
            </summary>
            <param name="element">The WebElement on which a double click is required</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.DoubleClick(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Double clicks on a WebElement
            </summary>
            <param name="locator">The locator for the WebElement which is the target of a double click</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.DragAndDrop(OpenQA.Selenium.IWebElement,OpenQA.Selenium.IWebElement,System.Boolean,System.Boolean)">
            <summary>
            Drags a WebElement over a target WebElement and drops it
            </summary>
            <param name="source">The Web Element being dragged</param>
            <param name="target">The target WebElement for the action</param>
            <param name="waitForSource">Whether to wait for the source element to reach a known condition</param>
            <param name="waitForTarget">Whether to wait for the target element to reach a known condition</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.DragAndDrop(OpenQA.Selenium.By,OpenQA.Selenium.By,System.Boolean,System.Boolean)">
            <summary>
            Drags a WebElement over a target WebElement and drops it
            </summary>
            <param name="source">The locator for the Web Element being dragged</param>
            <param name="target">The locator for the target WebElement for the action</param>
            <param name="waitForSource">Whether to wait for the source element to reach a known condition</param>
            <param name="waitForTarget">Whether to wait for the target element to reach a known condition</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.DragAndDropToOffset(OpenQA.Selenium.IWebElement,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Drags a WebElement and drops it at an offset position
            </summary>
            <param name="element">The WebElement being dragged</param>
            <param name="xOffset">The x coordinate of the offset position</param>
            <param name="yOffset">The y coordinate of the offset position</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.DragAndDropToOffset(OpenQA.Selenium.By,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Drags a WebElement and drops it at an offset position
            </summary>
            <param name="locator">The locator for the WebElement being dragged</param>
            <param name="xOffset">The x coordinate of the offset position</param>
            <param name="yOffset">The y coordinate of the offset position</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.KeyDownOnElement(OpenQA.Selenium.IWebElement,System.String,System.Boolean)">
            <summary>
            Moves the virtual cursor to a WebElement and presses a key
            </summary>
            <param name="element">The WebElement on which the key is to be pressed</param>
            <param name="key">The key to be pressed</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.KeyDownOnElement(OpenQA.Selenium.By,System.String,System.Boolean)">
            <summary>
            Moves the virtual cursor to a WebElement and presses a key
            </summary>
            <param name="locator">The locator for the WebElement on which the key is to be pressed</param>
            <param name="key">The key to be pressed</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.KeyUpOnElement(OpenQA.Selenium.IWebElement,System.String,System.Boolean)">
            <summary>
            Releases a depressed key which a WebElement is selected
            </summary>
            <param name="element">The target WebElement for the key release</param>
            <param name="key">The key to be released</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.KeyUpOnElement(OpenQA.Selenium.By,System.String,System.Boolean)">
            <summary>
            Releases a depressed key which a WebElement is selected
            </summary>
            <param name="locator">The locator for the target WebElement for the key release</param>
            <param name="key">The key to be released</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.MoveByOffset(OpenQA.Selenium.IWebElement,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the virtual cursor by an offset from a WebElement
            </summary>
            <param name="element">The WebElement from which the cursor will move</param>
            <param name="xOffset">The x coordinate offset for the movement</param>
            <param name="yOffset">The y coordinate offset for the movement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.MoveByOffset(OpenQA.Selenium.By,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the virtual cursor by an offset from a WebElement
            </summary>
            <param name="locator">The locator for the WebElement from which the cursor will move</param>
            <param name="xOffset">The x coordinate offset for the movement</param>
            <param name="yOffset">The y coordinate offset for the movement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.MoveToElementWithOffset(OpenQA.Selenium.IWebElement,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the virtual cursor by an offset from a WebElement
            </summary>
            <param name="element">The WebElement from which the cursor will move</param>
            <param name="xOffset">The x coordinate offset for the movement</param>
            <param name="yOffset">The y coordinate offset for the movement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.MoveToElementWithOffset(OpenQA.Selenium.By,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the virtual cursor by an offset from a WebElement
            </summary>
            <param name="locator">The locator for the WebElement from which the cursor will move</param>
            <param name="xOffset">The x coordinate offset for the movement</param>
            <param name="yOffset">The y coordinate offset for the movement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ReleaseMouseButton(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Releases the mouse button over a WebElement
            </summary>
            <param name="element">The WebElement over which to release the mouse button</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ReleaseMouseButton(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Releases the mouse button over a WebElement
            </summary>
            <param name="locator">The locator for the WebElement over which to release the mouse button</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.SendValueToField(OpenQA.Selenium.IWebElement,System.String,System.Boolean)">
            <summary>
            Sends a sequence of keystrokes to the WebElement specified
            </summary>
            <param name="element">The WebElement that receives the keystrokes</param>
            <param name="text">The keystrokes that are to be sent to the WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.SendValueToField(OpenQA.Selenium.By,System.String,System.Boolean)">
            <summary>
            Sends a sequence of keystrokes to the WebElement specified
            </summary>
            <param name="locator">The locator for the WebElement that receives the keystrokes</param>
            <param name="text">The keystrokes that are to be sent to the WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.SelectItemFromDropdown(OpenQA.Selenium.IWebElement,System.String,System.Boolean)">
            <summary>
            Selects an item from a dropdown by text value
            </summary>
            <param name="element">The dropdown menu</param>
            <param name="item">The itemn to choose</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.SelectItemFromDropdown(OpenQA.Selenium.By,System.String,System.Boolean)">
            <summary>
            Selects an item from a dropdown by text value
            </summary>
            <param name="locator">The locator for the dropdown menu</param>
            <param name="item">The itemn to choose</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.SelectRowFromDropdown(OpenQA.Selenium.IWebElement,System.Int32,System.Boolean)">
            <summary>
            Selects an item from a dropdown by row number
            </summary>
            <param name="element">The dropdown menu</param>
            <param name="row">The row number to choose</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.SelectRowFromDropdown(OpenQA.Selenium.By,System.Int32,System.Boolean)">
            <summary>
            Selects an item from a dropdown by text value
            </summary>
            <param name="locator">The locator for the dropdown menu</param>
            <param name="row">The row number to choose</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.SelectValueFromDropdown(OpenQA.Selenium.IWebElement,System.String,System.Boolean)">
            <summary>
            Selects an item from a dropdown by text value
            </summary>
            <param name="element">The dropdown menu</param>
            <param name="value">The value to choose</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.SelectValueFromDropdown(OpenQA.Selenium.By,System.String,System.Boolean)">
            <summary>
            Selects an item from a dropdown by text value
            </summary>
            <param name="locator">The locator for the dropdown menu</param>
            <param name="value">The value to choose</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ReturnEncapsulatedDriver">
            <summary>
            Gets a reference to the encapsulated IWebDriver
            </summary>
            <returns>The encapsulated IWebDriver</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.CheckCookieExists(System.String)">
            <summary>
            Checks if a cookie exists
            </summary>
            <param name="cookieName">The name of the cookie to check for</param>
            <returns>A boolean value indicating whether the cookie exists</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.AddCookie(System.String,System.String)">
            <summary>
            Adds a cookie to the browser
            </summary>
            <param name="name">The name of the cookie to add</param>
            <param name="value">The value set within the cookie</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.AddCookie(System.String,System.String,System.String)">
            <summary>
            Adds a cookie to the browser
            </summary>
            <param name="name">The name of the cookie to add</param>
            <param name="value">The value set within the cookie</param>
            <param name="path">The path of the cookie</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.AddCookie(System.String,System.String,System.String,System.DateTime)">
            <summary>
            Adds a cookie to the browser
            </summary>
            <param name="name">The name of the cookie to add</param>
            <param name="value">The value set within the cookie</param>
            <param name="path">The path of the cookie</param>
            <param name="expiry">The date and time at which the cookie expires</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.AddCookie(System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
            Adds a cookie to the browser
            </summary>
            <param name="name">The name of the cookie to add</param>
            <param name="value">The value set within the cookie</param>
            <param name="domain">The domain for which the cookie is being added</param>
            <param name="path">The path of the cookie</param>
            <param name="expiry">The date and time at which the cookie expires</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.AddCookie(OpenQA.Selenium.Cookie)">
            <summary>
            Adds a predefined cookie to the current broowser session
            </summary>
            <param name="cookie">The cookie to be added</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.GetCookies">
            <summary>
            Gets a list of cookies currently saved by the browser
            </summary>
            <returns>The list of cookies</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.DeleteAllCookies">
            <summary>
            Deletes all cookies currently found in the browser
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.DeleteCookie(OpenQA.Selenium.Cookie)">
            <summary>
            Deletes a cookie, given a copy of that cookie
            </summary>
            <param name="cookie">The definition of the cookie to be deleted</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.DeleteCookieNamed(System.String)">
            <summary>
            Deletes a named cookie
            </summary>
            <param name="cookie">The name of the cookie</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.GetCookieNamed(System.String)">
            <summary>
            Gets a cookie from the browser
            </summary>
            <param name="cookie">The name of the cookie to find</param>
            <returns>The named cookie</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ReplaceCookie(System.String,System.String)">
            <summary>
            Deletes and then replaces a named cookie
            </summary>
            <param name="name">The name of the cookie</param>
            <param name="value">The value to set within the cookie</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ReplaceCookie(System.String,System.String,System.String)">
            <summary>
            Deletes and then replaces a named cookie
            </summary>
            <param name="name">The name of the cookie</param>
            <param name="value">The value to set within the cookie</param>
            <param name="path">The path of the cookie</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ReplaceCookie(System.String,System.String,System.String,System.DateTime)">
            <summary>
            Deletes and then replaces a named cookie
            </summary>
            <param name="name">The name of the cookie</param>
            <param name="value">The value to set within the cookie</param>
            <param name="path">The path of the cookie</param>
            <param name="expiry">The date and time at which the cookie expires</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ReplaceCookie(System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
            Deletes and then replaces a named cookie
            </summary>
            <param name="name">The name of the cookie</param>
            <param name="value">The value to set within the cookie</param>
            <param name="domain">The domain for which the cookie is being added</param>
            <param name="path">The path of the cookie</param>
            <param name="expiry">The date and time at which the cookie expires</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.GetAvailableLogTypes">
            <summary>
            Gets a list of available log types
            </summary>
            <returns>The list of log types</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.GetAvailableLogEntries(System.String)">
            <summary>
            Gets the available log entries for a particular log type
            </summary>
            <param name="logKind">The type of log to consult</param>
            <returns>The list of log entries</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.SetImplicitWait(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the implicit wait via a method.
            </summary>
            <param name="minutes">The number of minutes in the  implicit wait</param>
            <param name="seconds">The number of seconds in the  implicit wait</param>
            <param name="milliseconds">The number of milliseconds in the  implicit wait</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.SetPageLoadTimeout(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the page load timeout via a method.
            </summary>
            <param name="minutes">The number of minutes in the  page load timeout</param>
            <param name="seconds">The number of seconds in the  page load timeout</param>
            <param name="milliseconds">The number of milliseconds in the page load timeout</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.SetScriptTimeout(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the script timeout via a method.
            </summary>
            <param name="minutes">The number of minutes in the script timeout</param>
            <param name="seconds">The number of seconds in the script timeout</param>
            <param name="milliseconds">The number of milliseconds in the script timeout</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.MaximiseView">
            <summary>
            Maximises the current window
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.GetWindowPosition">
            <summary>
            Gets the current window position
            </summary>
            <returns>A tuple containing the x and y coordinates of the top left corner of the window</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.GetWindowSize">
            <summary>
            Gets the current window size
            </summary>
            <returns>A tuple containing the width and height of the current window</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ResizeBrowserWindow(System.Int32,System.Int32)">
            <summary>
            Resizes the browser window to the assigned width and height
            </summary>
            <param name="width">The width to assign to the browser</param>
            <param name="height">The height to assign to the browser</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.PressBackButton">
            <summary>
            Presses the back button of the browser
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.PressForwardButton">
            <summary>
            Presses the forward button of the browser
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.NavigateToPage(System.String)">
            <summary>
            Navigates to a particular website by URL
            </summary>
            <param name="url">The URL of the website to load in the browser</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.NavigateToPage(System.Uri)">
            <summary>
            Navigates to a particular website by URI
            </summary>
            <param name="url">The URI object of the website to load in the browser</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.RefreshBrowser">
            <summary>
            Refreshes the currently selected browser
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.CheckPageSourceForText(System.String)">
            <summary>
            Checks the entire html source for the page for a piece of text
            </summary>
            <param name="text">The text to search the page for</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.GetPageSource">
            <summary>
            Gets the source code for the page
            </summary>
            <returns>The Page Source</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ClosePagesAndQuitDriver">
            <summary>
            Closes the browser pages and quits the driver
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.IsWindowOpen(System.String)">
            <summary>
            Checks if a window is open, using its window handle
            </summary>
            <param name="window">The window handle to query</param>
            <returns>A true/false value</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.SwitchToActiveWebElement">
            <summary>
            Switches to the currently active WebElement
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.SwitchToAlertDialog">
            <summary>
            Switches to the currently active Alert Dialog
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.SwitchToDefaultContent">
            <summary>
            Switches to the original frame or window
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.SwitchToFrame(System.Int32)">
            <summary>
            Switches to a numbered frame by index
            </summary>
            <param name="frameIndex">The index number for the frame</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.SwitchToFrame(OpenQA.Selenium.IWebElement)">
            <summary>
            Switches to the frame identified by the WebElement
            </summary>
            <param name="frameElement">A WebElement representing the frame to activate</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.SwitchToFrame(OpenQA.Selenium.By)">
            <summary>
            Switches to the frame identified by the WebElement
            </summary>
            <param name="frameLocator">The locator for the WebElement representing the frame to activate</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.SwitchToFrame(System.String)">
            <summary>
            Switches to the frame identified by the WebElement
            </summary>
            <param name="frameName">The name of the frame to activate</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.SwitchToParentFrame">
            <summary>
            Switches to the parent frame of a selected WebElement
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.SwitchToWindow(System.String)">
            <summary>
            Switches to a window, given the name of that window
            </summary>
            <param name="windowName">The name of the window to switch to</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.GetBrowserWindowTitle">
            <summary>
            Gets the title of the currently active browser
            </summary>
            <returns>The name of the currently active window</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.GetBrowserWindowUrl">
            <summary>
            Gets the URL in the currently active browser window
            </summary>
            <returns>The URL for the browser</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.GetCurrentWindowHandle">
            <summary>
            Gets the Window Handle for the currently selected page
            </summary>
            <returns>A window handle representing a unique reference to a page</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.GetAllWindowHandles">
            <summary>
            Gets a list of WindowHandles for all windows under the control of the current driver session
            </summary>
            <returns>A collection of WindowHandles</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.OpenNewView">
            <summary>
            Opens a new window using the send keys command
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.CloseView">
            <summary>
            Closes the currently selected window
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.WaitForElementToLoad(OpenQA.Selenium.IWebElement)">
            <summary>
            Waits for an element to be loaded
            </summary>
            <param name="element">The element for which to wait</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.WaitForElementToLoad(OpenQA.Selenium.By)">
            <summary>
            Waits for an element to be loaded
            </summary>
            <param name="locator">The locator for the element for which to wait</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.WaitForElementToLoad(OpenQA.Selenium.IWebElement,System.Int32)">
            <summary>
            Waits for an element to be loaded
            </summary>
            <param name="element">The element for which to wait</param>
            <param name="seconds">Maximum number of seconds to wait</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.WaitForElementToLoad(OpenQA.Selenium.By,System.Int32)">
            <summary>
            Waits for an element to be loaded
            </summary>
            <param name="locator">The locator for the element for which to wait</param>
            <param name="seconds">Maximum number of seconds to wait</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.WaitForPageToLoad(OpenQA.Selenium.IWebElement)">
            <summary>
            Waits for a page to load
            </summary>
            <param name="element">An element from the previous page. If omitted, the code will wait for the body of the page to be viosible</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.WaitForInvisibilityOfElement(OpenQA.Selenium.By)">
            <summary>
            Waits for an element to disappear from the DOM
            </summary>
            <param name="locator">The locator for the element for which to wait</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.WaitForInvisibilityOfElementWithText(OpenQA.Selenium.By,System.String)">
            <summary>
            Waits for an element containing text to disappear from the DOM
            </summary>
            <param name="locator">The locator for the element for which to wait</param>
            <param name="text">The text that should be found in the element</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ClickLink(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Clicks on a WebElement
            </summary>
            <param name="element">The WebElement on which to click</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ClickLink(OpenQA.Selenium.IWebElement,Liberator.Driver.RatClock,System.Boolean)">
            <summary>
            Clicks on a WebElement
            </summary>
            <param name="element">The WebElement on which to click</param>
            <param name="clock">A clock that may be used to set custom timeouts</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ClickLink(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Clicks on a WebElement
            </summary>
            <param name="locator">The locator for the WebElement on which to click</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ClickLink(OpenQA.Selenium.By,Liberator.Driver.RatClock,System.Boolean)">
            <summary>
            Clicks on a WebElement
            </summary>
            <param name="locator">The locator for the WebElement on which to click</param>
            <param name="clock">A clock that may be used to set custom timeouts</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ClickLinkAndWait(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Clicks on a link and waits for a new page to be loaded
            </summary>
            <param name="element">The element on which to click</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ClickLinkAndWait(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Clicks on a link and waits for a new page to be loaded
            </summary>
            <param name="locator">The element on which to click</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.GetElementText(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Gets the text of a WebElement
            </summary>
            <param name="element">The WebElement from which to retrieve text</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>The text of the WebElement</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.GetElementText(OpenQA.Selenium.IWebElement,Liberator.Driver.RatClock,System.Boolean)">
            <summary>
            Gets the text of a WebElement
            </summary>
            <param name="element">The WebElement from which to retrieve text</param>
            <param name="clock">A clock that may be used to set custom timeouts</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>The text of the WebElement</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.GetElementText(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Gets the text of a WebElement
            </summary>
            <param name="locator">The WebElement from which to retrieve text</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>The text of the WebElement</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.GetElementText(OpenQA.Selenium.By,Liberator.Driver.RatClock,System.Boolean)">
            <summary>
            Gets the text of a WebElement
            </summary>
            <param name="locator">The WebElement from which to retrieve text</param>
            <param name="clock">A clock that may be used to set custom timeouts</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>The text of the WebElement</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ElementExists(OpenQA.Selenium.IWebElement)">
            <summary>
            Checks the browser for the presence of a particular WebElement
            </summary>
            <param name="element">The WebElement whose presence is tested</param>
            <returns>True if the WebElement is present; false if the WebElement is not present</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ElementExists(OpenQA.Selenium.By)">
            <summary>
            Checks the browser for the presence of a particular WebElement
            </summary>
            <param name="locator">The locator for the WebElement whose presence is tested</param>
            <returns>True if the WebElement is present; false if the WebElement is not present</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.GetElementAttribute(OpenQA.Selenium.IWebElement,System.String,System.Boolean)">
            <summary>
            Gets an attribute of a WebElement and returns it as text
            </summary>
            <param name="element">The WebElement whose attributes are to be tested</param>
            <param name="attribute">The attribute value to retrieve</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>True if the WebElement is present; false if the WebElement is not present</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.GetElementAttribute(OpenQA.Selenium.IWebElement,System.String,Liberator.Driver.RatClock,System.Boolean)">
            <summary>
            Gets an attribute of a WebElement and returns it as text
            </summary>
            <param name="element">The WebElement whose attributes are to be tested</param>
            <param name="attribute">The attribute value to retrieve</param>
            <param name="clock">A clock that may be used to set custom timeouts</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>The attribute to retrieve</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.GetElementAttribute(OpenQA.Selenium.By,System.String,System.Boolean)">
            <summary>
            Gets an attribute of a WebElement and returns it as text
            </summary>
            <param name="locator">The locator for the WebElement whose attributes are to be tested</param>
            <param name="attribute">The attribute value to retrieve</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>The attribute to retrieve</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.GetElementAttribute(OpenQA.Selenium.By,System.String,Liberator.Driver.RatClock,System.Boolean)">
            <summary>
            Gets an attribute of a WebElement and returns it as text
            </summary>
            <param name="locator">The locator for the WebElement whose attributes are to be tested</param>
            <param name="attribute">The attribute value to retrieve</param>
            <param name="clock">A clock that may be used to set custom timeouts</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>The attribute to retrieve</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindElementByCssSelector(System.String,System.Boolean)">
            <summary>
            Finds an element with a unique CSS Selector
            </summary>
            <param name="cssSelector">The CSS Selector to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A WebElements that has the CSS Selector</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindElementsByCssSelector(System.String,System.Boolean)">
            <summary>
            Finds a list of elements that share a CSS Selector
            </summary>
            <param name="cssSelector">The CSS Selector to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of WebElements that share the CSS Selector</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindSubElementsByCssSelector(System.String,OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a CSS Selector
            </summary>
            <param name="cssSelector">The CSS Selector to search for</param>
            <param name="element">The parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindSubElementsByCssSelector(System.String,OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a CSS Selector
            </summary>
            <param name="cssSelector">The CSS Selector to search for</param>
            <param name="locator">The locator for the parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindElementByClassName(System.String,System.Boolean)">
            <summary>
            Finds a WebElement that has a Class Name
            </summary>
            <param name="className">The Class Name to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A WebElement described by the Class Name</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindElementsByClassName(System.String,System.Boolean)">
            <summary>
            Finds a list of elements that share a Class Name
            </summary>
            <param name="className">The Class Name to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindSubElementsByClassName(System.String,OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a Class Name
            </summary>
            <param name="className">The Class Name to search for</param>
            <param name="element">The parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindSubElementsByClassName(System.String,OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a Class Name
            </summary>
            <param name="cssSelector">The Class Name to search for</param>
            <param name="locator">The locator for the parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindElementById(System.String,System.Boolean)">
            <summary>
            Finds a WebElement whose id is as specified
            </summary>
            <param name="id">The id to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A WebElement with the specified id</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindElementByLinkText(System.String,System.Boolean)">
            <summary>
            Finds a WebElement whose link text is as specified
            </summary>
            <param name="linkText">The text to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A WebElement with the specified Link Text</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindElementsByLinkText(System.String,System.Boolean)">
            <summary>
            Finds a list of elements that whose link text is as specified
            </summary>
            <param name="linkText">The text to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindSubElementsByLinkText(System.String,OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement whose link text is as specified
            </summary>
            <param name="linkText">The text to search for</param>
            <param name="element">The parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindSubElementsByLinkText(System.String,OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement whose link text is as specified
            </summary>
            <param name="linkText">The text to search for</param>
            <param name="locator">The locator for the parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindElementByName(System.String,System.Boolean)">
            <summary>
            Finds a WebElement by name
            </summary>
            <param name="name">The name to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindElementsByName(System.String,System.Boolean)">
            <summary>
            Finds a list of elements that share a name
            </summary>
            <param name="name">The name to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindSubElementsByName(System.String,OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a name
            </summary>
            <param name="name">The name to search for</param>
            <param name="element">The parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindSubElementsByName(System.String,OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a name
            </summary>
            <param name="name">The name to search for</param>
            <param name="locator">The locator for the parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindElementByPartialLinkText(System.String,System.Boolean)">
            <summary>
            Finds a WebElement whose link text is matched in part
            </summary>
            <param name="linkText">The text to find in whole or in part</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A WebElement</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindElementsByPartialLinkText(System.String,System.Boolean)">
            <summary>
            Finds a list of elements whose link text is matched in part
            </summary>
            <param name="linkText">The text to find in whole or in part</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindSubElementsByPartialLinkText(System.String,OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement whose link text is matched in part
            </summary>
            <param name="linkText">The text to find in whole or in part</param>
            <param name="element">The parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindSubElementsByPartialLinkText(System.String,OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement whose link text is matched in part
            </summary>
            <param name="linkText">The text to find in whole or in part</param>
            <param name="locator">The locator for the parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindElementByTag(System.String,System.Boolean)">
            <summary>
            Finds a WebElement that possesses a tag
            </summary>
            <param name="tagName">The tag to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A WebElement</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindElementsByTag(System.String,System.Boolean)">
            <summary>
            Finds a list of elements that share a tag
            </summary>
            <param name="tagName">The tage to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindSubElementsByTag(System.String,OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a tag
            </summary>
            <param name="tagName">The tage to search for</param>
            <param name="element">The parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindSubElementsByTag(System.String,OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a tag
            </summary>
            <param name="tagName">The tag to search for</param>
            <param name="locator">The locator for the parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindElementByXPath(System.String,System.Boolean)">
            <summary>
            Finds a WebEements by its xpath
            </summary>
            <param name="xpath">The xpath to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A WebElement</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindElementsByXPath(System.String,System.Boolean)">
            <summary>
            Finds a list of elements that share an xpath
            </summary>
            <param name="xpath">The xpath to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindSubElementsByXPath(System.String,OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share an xpath
            </summary>
            <param name="xpath">The xpath to search for</param>
            <param name="element">The parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.FindSubElementsByXPath(System.String,OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share an xpath
            </summary>
            <param name="xpath">The xpath to search for</param>
            <param name="locator">The locator for the parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ExtractElementFromCollectionByAttribute(OpenQA.Selenium.IWebElement,Liberator.Driver.Enums.EnumLocatorType,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Finds a WebElement identified by an attribite value from a collection of WebElements sharing a parent
            </summary>
            <param name="parentElement">The parent element for the process</param>
            <param name="type">The type of locator to use to fetch the collection</param>
            <param name="locator">The locator value for items in the collection</param>
            <param name="attribute">The HTML attribute to use to find the unique item</param>
            <param name="value">The value of the attribute of the unique item</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A web element identified by a locator type and an attribute value</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ExtractElementFromCollectionByAttribute(OpenQA.Selenium.By,Liberator.Driver.Enums.EnumLocatorType,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Finds a WebElement identified by an attribite value from a collection of WebElements sharing a parent
            </summary>
            <param name="parentLocator">The locator for the parent element for the process</param>
            <param name="type">The type of locator to use to fetch the collection</param>
            <param name="locator">The locator value for items in the collection</param>
            <param name="attribute">The HTML attribute to use to find the unique item</param>
            <param name="value">The value of the attribute of the unique item</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A web element identified by a locator type and an attribute value</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.TakeScreenshot(System.String)">
            <summary>
            Takes a screenshot of the active web page
            </summary>
            <param name="path">The path and name under which to save the image</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.Scripts">
            <summary>
            Returns a JavaScript Executor to the end user for custom JavaScript
            </summary>
            <returns>A JavaScript Executor</returns>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ExecuteJavaScript(System.String)">
            <summary>
            Executes a JavaScript statement passed as a string
            </summary>
            <param name="script">The JavaScript to be executed</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ExecuteJavaScript(System.String,System.Object[])">
            <summary>
            Executes a JavaScript statement passed as a string
            </summary>
            <param name="script">The JavaScript to be executed</param>
            <param name="parameters">The parameters for the passed JavaScript</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ExecuteAsyncJavaScript(System.String)">
            <summary>
            Executes a JavaScript statement passed as a string
            </summary>
            <param name="script">The JavaScript to be executed</param>
        </member>
        <member name="M:Liberator.Driver.IRatDriver`1.ExecuteAsyncJavaScript(System.String,System.Object[])">
            <summary>
            Executes a JavaScript statement passed as a string
            </summary>
            <param name="script">The JavaScript to be executed</param>
            <param name="parameters">The parameters for the passed JavaScript</param>
        </member>
        <member name="T:Liberator.Driver.IRodent">
            <summary>
            Base interface for RatDriver, also used in multithreaded testing
            </summary>
        </member>
        <member name="P:Liberator.Driver.IRodent.Id">
            <summary>
            Gets the unique Id of the RatDriver instance
            </summary>
        </member>
        <member name="P:Liberator.Driver.IRodent.DriverName">
            <summary>
            Text name for the driver
            </summary>
        </member>
        <member name="P:Liberator.Driver.IRodent.Element">
            <summary>
            The current WebElement under scrutiny
            </summary>
        </member>
        <member name="P:Liberator.Driver.IRodent.Locator">
            <summary>
            The locator for a WebElement under scrutiny
            </summary>
        </member>
        <member name="P:Liberator.Driver.IRodent.Elements">
            <summary>
            A list of Elements returned to the user by a query
            </summary>
        </member>
        <member name="P:Liberator.Driver.IRodent.Locators">
            <summary>
            A list of Locators returned to the user by a query
            </summary>
        </member>
        <member name="P:Liberator.Driver.IRodent.LastException">
            <summary>
            The last exception thrown by the driver
            </summary>
        </member>
        <member name="P:Liberator.Driver.IRodent.WindowHandles">
            <summary>
            The current collection of windows by handle
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRodent.HoverOverMenu(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Moves the virtual cursor position to a WebElement which acts as a menu and hovers
            </summary>
            <param name="element">The WebElement acting as a menu</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.HoverOverMenu(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Moves the virtual cursor position to a WebElement which acts as a menu and hovers
            </summary>
            <param name="locator">The locator for the WebElement acting as a menu</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.ClickAndHoverOverMenu(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Clicks on a WebElement acting as a menu and continues to hover
            </summary>
            <param name="element">The WebElement acting as a menu</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.ClickAndHoverOverMenu(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Clicks on a WebElement acting as a menu and continues to hover
            </summary>
            <param name="locator">The locator for the WebElement acting as a menu</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.ClickAndHoldMenu(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Clicks on a WebElement acting as a menu and continues to hold
            </summary>
            <param name="element">The WebElement acting as a menu</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.ClickAndHoldMenu(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Clicks on a WebElement acting as a menu and continues to hold
            </summary>
            <param name="locator">The locator for the WebElement acting as a menu</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.ClickContextualMenu(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Clicks on an element and displays a contextual menu
            </summary>
            <param name="element">The WebElement which is the target of the contextual menu click</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.ClickContextualMenu(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Clicks on an element and displays a contextual menu
            </summary>
            <param name="locator">The locator for the WebElement which is the target of the contextual menu click</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.DoubleClick(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Double clicks on a WebElement
            </summary>
            <param name="element">The WebElement on which a double click is required</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.DoubleClick(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Double clicks on a WebElement
            </summary>
            <param name="locator">The locator for the WebElement which is the target of a double click</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.DragAndDrop(OpenQA.Selenium.IWebElement,OpenQA.Selenium.IWebElement,System.Boolean,System.Boolean)">
            <summary>
            Drags a WebElement over a target WebElement and drops it
            </summary>
            <param name="source">The Web Element being dragged</param>
            <param name="target">The target WebElement for the action</param>
            <param name="waitForSource">Whether to wait for the source element to reach a known condition</param>
            <param name="waitForTarget">Whether to wait for the target element to reach a known condition</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.DragAndDrop(OpenQA.Selenium.By,OpenQA.Selenium.By,System.Boolean,System.Boolean)">
            <summary>
            Drags a WebElement over a target WebElement and drops it
            </summary>
            <param name="source">The locator for the Web Element being dragged</param>
            <param name="target">The locator for the target WebElement for the action</param>
            <param name="waitForSource">Whether to wait for the source element to reach a known condition</param>
            <param name="waitForTarget">Whether to wait for the target element to reach a known condition</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.DragAndDropToOffset(OpenQA.Selenium.IWebElement,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Drags a WebElement and drops it at an offset position
            </summary>
            <param name="element">The WebElement being dragged</param>
            <param name="xOffset">The x coordinate of the offset position</param>
            <param name="yOffset">The y coordinate of the offset position</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.DragAndDropToOffset(OpenQA.Selenium.By,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Drags a WebElement and drops it at an offset position
            </summary>
            <param name="locator">The locator for the WebElement being dragged</param>
            <param name="xOffset">The x coordinate of the offset position</param>
            <param name="yOffset">The y coordinate of the offset position</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.KeyDownOnElement(OpenQA.Selenium.IWebElement,System.String,System.Boolean)">
            <summary>
            Moves the virtual cursor to a WebElement and presses a key
            </summary>
            <param name="element">The WebElement on which the key is to be pressed</param>
            <param name="key">The key to be pressed</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.KeyDownOnElement(OpenQA.Selenium.By,System.String,System.Boolean)">
            <summary>
            Moves the virtual cursor to a WebElement and presses a key
            </summary>
            <param name="locator">The locator for the WebElement on which the key is to be pressed</param>
            <param name="key">The key to be pressed</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.KeyUpOnElement(OpenQA.Selenium.IWebElement,System.String,System.Boolean)">
            <summary>
            Releases a depressed key which a WebElement is selected
            </summary>
            <param name="element">The target WebElement for the key release</param>
            <param name="key">The key to be released</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.KeyUpOnElement(OpenQA.Selenium.By,System.String,System.Boolean)">
            <summary>
            Releases a depressed key which a WebElement is selected
            </summary>
            <param name="locator">The locator for the target WebElement for the key release</param>
            <param name="key">The key to be released</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.MoveByOffset(OpenQA.Selenium.IWebElement,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the virtual cursor by an offset from a WebElement
            </summary>
            <param name="element">The WebElement from which the cursor will move</param>
            <param name="xOffset">The x coordinate offset for the movement</param>
            <param name="yOffset">The y coordinate offset for the movement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.MoveByOffset(OpenQA.Selenium.By,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the virtual cursor by an offset from a WebElement
            </summary>
            <param name="locator">The locator for the WebElement from which the cursor will move</param>
            <param name="xOffset">The x coordinate offset for the movement</param>
            <param name="yOffset">The y coordinate offset for the movement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.MoveToElementWithOffset(OpenQA.Selenium.IWebElement,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the virtual cursor by an offset from a WebElement
            </summary>
            <param name="element">The WebElement from which the cursor will move</param>
            <param name="xOffset">The x coordinate offset for the movement</param>
            <param name="yOffset">The y coordinate offset for the movement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.MoveToElementWithOffset(OpenQA.Selenium.By,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the virtual cursor by an offset from a WebElement
            </summary>
            <param name="locator">The locator for the WebElement from which the cursor will move</param>
            <param name="xOffset">The x coordinate offset for the movement</param>
            <param name="yOffset">The y coordinate offset for the movement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.ReleaseMouseButton(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Releases the mouse button over a WebElement
            </summary>
            <param name="element">The WebElement over which to release the mouse button</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.ReleaseMouseButton(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Releases the mouse button over a WebElement
            </summary>
            <param name="locator">The locator for the WebElement over which to release the mouse button</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.SendValueToField(OpenQA.Selenium.IWebElement,System.String,System.Boolean)">
            <summary>
            Sends a sequence of keystrokes to the WebElement specified
            </summary>
            <param name="element">The WebElement that receives the keystrokes</param>
            <param name="text">The keystrokes that are to be sent to the WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.SendValueToField(OpenQA.Selenium.By,System.String,System.Boolean)">
            <summary>
            Sends a sequence of keystrokes to the WebElement specified
            </summary>
            <param name="locator">The locator for the WebElement that receives the keystrokes</param>
            <param name="text">The keystrokes that are to be sent to the WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.SelectItemFromDropdown(OpenQA.Selenium.IWebElement,System.String,System.Boolean)">
            <summary>
            Selects an item from a dropdown by text value
            </summary>
            <param name="element">The dropdown menu</param>
            <param name="item">The itemn to choose</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.SelectItemFromDropdown(OpenQA.Selenium.By,System.String,System.Boolean)">
            <summary>
            Selects an item from a dropdown by text value
            </summary>
            <param name="locator">The locator for the dropdown menu</param>
            <param name="item">The itemn to choose</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.SelectRowFromDropdown(OpenQA.Selenium.IWebElement,System.Int32,System.Boolean)">
            <summary>
            Selects an item from a dropdown by row number
            </summary>
            <param name="element">The dropdown menu</param>
            <param name="row">The row number to choose</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.SelectRowFromDropdown(OpenQA.Selenium.By,System.Int32,System.Boolean)">
            <summary>
            Selects an item from a dropdown by text value
            </summary>
            <param name="locator">The locator for the dropdown menu</param>
            <param name="row">The row number to choose</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.SelectValueFromDropdown(OpenQA.Selenium.IWebElement,System.String,System.Boolean)">
            <summary>
            Selects an item from a dropdown by text value
            </summary>
            <param name="element">The dropdown menu</param>
            <param name="value">The value to choose</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.SelectValueFromDropdown(OpenQA.Selenium.By,System.String,System.Boolean)">
            <summary>
            Selects an item from a dropdown by text value
            </summary>
            <param name="locator">The locator for the dropdown menu</param>
            <param name="value">The value to choose</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.ReturnEncapsulatedDriver">
            <summary>
            Gets a reference to the encapsulated IWebDriver
            </summary>
            <returns>The encapsulated IWebDriver</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.CheckCookieExists(System.String)">
            <summary>
            Checks if a cookie exists
            </summary>
            <param name="cookieName">The name of the cookie to check for</param>
            <returns>A boolean value indicating whether the cookie exists</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.AddCookie(System.String,System.String)">
            <summary>
            Adds a cookie to the browser
            </summary>
            <param name="name">The name of the cookie to add</param>
            <param name="value">The value set within the cookie</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.AddCookie(System.String,System.String,System.String)">
            <summary>
            Adds a cookie to the browser
            </summary>
            <param name="name">The name of the cookie to add</param>
            <param name="value">The value set within the cookie</param>
            <param name="path">The path of the cookie</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.AddCookie(System.String,System.String,System.String,System.DateTime)">
            <summary>
            Adds a cookie to the browser
            </summary>
            <param name="name">The name of the cookie to add</param>
            <param name="value">The value set within the cookie</param>
            <param name="path">The path of the cookie</param>
            <param name="expiry">The date and time at which the cookie expires</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.AddCookie(System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
            Adds a cookie to the browser
            </summary>
            <param name="name">The name of the cookie to add</param>
            <param name="value">The value set within the cookie</param>
            <param name="domain">The domain for which the cookie is being added</param>
            <param name="path">The path of the cookie</param>
            <param name="expiry">The date and time at which the cookie expires</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.AddCookie(OpenQA.Selenium.Cookie)">
            <summary>
            Adds a predefined cookie to the current broowser session
            </summary>
            <param name="cookie">The cookie to be added</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.GetCookies">
            <summary>
            Gets a list of cookies currently saved by the browser
            </summary>
            <returns>The list of cookies</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.DeleteAllCookies">
            <summary>
            Deletes all cookies currently found in the browser
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRodent.DeleteCookie(OpenQA.Selenium.Cookie)">
            <summary>
            Deletes a cookie, given a copy of that cookie
            </summary>
            <param name="cookie">The definition of the cookie to be deleted</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.DeleteCookieNamed(System.String)">
            <summary>
            Deletes a named cookie
            </summary>
            <param name="cookie">The name of the cookie</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.GetCookieNamed(System.String)">
            <summary>
            Gets a cookie from the browser
            </summary>
            <param name="cookie">The name of the cookie to find</param>
            <returns>The named cookie</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.ReplaceCookie(System.String,System.String)">
            <summary>
            Deletes and then replaces a named cookie
            </summary>
            <param name="name">The name of the cookie</param>
            <param name="value">The value to set within the cookie</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.ReplaceCookie(System.String,System.String,System.String)">
            <summary>
            Deletes and then replaces a named cookie
            </summary>
            <param name="name">The name of the cookie</param>
            <param name="value">The value to set within the cookie</param>
            <param name="path">The path of the cookie</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.ReplaceCookie(System.String,System.String,System.String,System.DateTime)">
            <summary>
            Deletes and then replaces a named cookie
            </summary>
            <param name="name">The name of the cookie</param>
            <param name="value">The value to set within the cookie</param>
            <param name="path">The path of the cookie</param>
            <param name="expiry">The date and time at which the cookie expires</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.ReplaceCookie(System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
            Deletes and then replaces a named cookie
            </summary>
            <param name="name">The name of the cookie</param>
            <param name="value">The value to set within the cookie</param>
            <param name="domain">The domain for which the cookie is being added</param>
            <param name="path">The path of the cookie</param>
            <param name="expiry">The date and time at which the cookie expires</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.GetAvailableLogTypes">
            <summary>
            Gets a list of available log types
            </summary>
            <returns>The list of log types</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.GetAvailableLogEntries(System.String)">
            <summary>
            Gets the available log entries for a particular log type
            </summary>
            <param name="logKind">The type of log to consult</param>
            <returns>The list of log entries</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.SetImplicitWait(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the implicit wait via a method.
            </summary>
            <param name="minutes">The number of minutes in the  implicit wait</param>
            <param name="seconds">The number of seconds in the  implicit wait</param>
            <param name="milliseconds">The number of milliseconds in the  implicit wait</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.SetPageLoadTimeout(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the page load timeout via a method.
            </summary>
            <param name="minutes">The number of minutes in the  page load timeout</param>
            <param name="seconds">The number of seconds in the  page load timeout</param>
            <param name="milliseconds">The number of milliseconds in the page load timeout</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.SetScriptTimeout(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the script timeout via a method.
            </summary>
            <param name="minutes">The number of minutes in the script timeout</param>
            <param name="seconds">The number of seconds in the script timeout</param>
            <param name="milliseconds">The number of milliseconds in the script timeout</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.MaximiseView">
            <summary>
            Maximises the current window
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRodent.GetWindowPosition">
            <summary>
            Gets the current window position
            </summary>
            <returns>A tuple containing the x and y coordinates of the top left corner of the window</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.GetWindowSize">
            <summary>
            Gets the current window size
            </summary>
            <returns>A tuple containing the width and height of the current window</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.ResizeBrowserWindow(System.Int32,System.Int32)">
            <summary>
            Resizes the browser window to the assigned width and height
            </summary>
            <param name="width">The width to assign to the browser</param>
            <param name="height">The height to assign to the browser</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.PressBackButton">
            <summary>
            Presses the back button of the browser
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRodent.PressForwardButton">
            <summary>
            Presses the forward button of the browser
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRodent.NavigateToPage(System.String)">
            <summary>
            Navigates to a particular website by URL
            </summary>
            <param name="url">The URL of the website to load in the browser</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.NavigateToPage(System.Uri)">
            <summary>
            Navigates to a particular website by URI
            </summary>
            <param name="url">The URI object of the website to load in the browser</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.RefreshBrowser">
            <summary>
            Refreshes the currently selected browser
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRodent.CheckPageSourceForText(System.String)">
            <summary>
            Checks the entire html source for the page for a piece of text
            </summary>
            <param name="text">The text to search the page for</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.GetPageSource">
            <summary>
            Gets the source code for the page
            </summary>
            <returns>The Page Source</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.ClosePagesAndQuitDriver">
            <summary>
            Closes the browser pages and quits the driver
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRodent.IsWindowOpen(System.String)">
            <summary>
            Checks if a window is open, using its window handle
            </summary>
            <param name="window">The window handle to query</param>
            <returns>A true/false value</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.SwitchToActiveWebElement">
            <summary>
            Switches to the currently active WebElement
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRodent.SwitchToAlertDialog">
            <summary>
            Switches to the currently active Alert Dialog
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRodent.SwitchToDefaultContent">
            <summary>
            Switches to the original frame or window
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRodent.SwitchToFrame(System.Int32)">
            <summary>
            Switches to a numbered frame by index
            </summary>
            <param name="frameIndex">The index number for the frame</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.SwitchToFrame(OpenQA.Selenium.IWebElement)">
            <summary>
            Switches to the frame identified by the WebElement
            </summary>
            <param name="frameElement">A WebElement representing the frame to activate</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.SwitchToFrame(OpenQA.Selenium.By)">
            <summary>
            Switches to the frame identified by the WebElement
            </summary>
            <param name="frameLocator">The locator for the WebElement representing the frame to activate</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.SwitchToFrame(System.String)">
            <summary>
            Switches to the frame identified by the WebElement
            </summary>
            <param name="frameName">The name of the frame to activate</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.SwitchToParentFrame">
            <summary>
            Switches to the parent frame of a selected WebElement
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRodent.SwitchToWindow(System.String)">
            <summary>
            Switches to a window, given the name of that window
            </summary>
            <param name="windowName">The name of the window to switch to</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.GetBrowserWindowTitle">
            <summary>
            Gets the title of the currently active browser
            </summary>
            <returns>The name of the currently active window</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.GetBrowserWindowUrl">
            <summary>
            Gets the URL in the currently active browser window
            </summary>
            <returns>The URL for the browser</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.GetCurrentWindowHandle">
            <summary>
            Gets the Window Handle for the currently selected page
            </summary>
            <returns>A window handle representing a unique reference to a page</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.GetAllWindowHandles">
            <summary>
            Gets a list of WindowHandles for all windows under the control of the current driver session
            </summary>
            <returns>A collection of WindowHandles</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.OpenNewView">
            <summary>
            Opens a new window using the send keys command
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRodent.CloseView">
            <summary>
            Closes the currently selected window
            </summary>
        </member>
        <member name="M:Liberator.Driver.IRodent.WaitForElementToLoad(OpenQA.Selenium.IWebElement)">
            <summary>
            Waits for an element to be loaded
            </summary>
            <param name="element">The element for which to wait</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.WaitForElementToLoad(OpenQA.Selenium.By)">
            <summary>
            Waits for an element to be loaded
            </summary>
            <param name="locator">The locator for the element for which to wait</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.WaitForElementToLoad(OpenQA.Selenium.IWebElement,System.Int32)">
            <summary>
            Waits for an element to be loaded
            </summary>
            <param name="element">The element for which to wait</param>
            <param name="seconds">Maximum number of seconds to wait</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.WaitForElementToLoad(OpenQA.Selenium.By,System.Int32)">
            <summary>
            Waits for an element to be loaded
            </summary>
            <param name="locator">The locator for the element for which to wait</param>
            <param name="seconds">Maximum number of seconds to wait</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.WaitForPageToLoad(OpenQA.Selenium.IWebElement)">
            <summary>
            Waits for a page to load
            </summary>
            <param name="element">An element from the previous page. If omitted, the code will wait for the body of the page to be viosible</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.WaitForInvisibilityOfElement(OpenQA.Selenium.By)">
            <summary>
            Waits for an element to disappear from the DOM
            </summary>
            <param name="locator">The locator for the element for which to wait</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.WaitForInvisibilityOfElementWithText(OpenQA.Selenium.By,System.String)">
            <summary>
            Waits for an element containing text to disappear from the DOM
            </summary>
            <param name="locator">The locator for the element for which to wait</param>
            <param name="text">The text that should be found in the element</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.ClickLink(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Clicks on a WebElement
            </summary>
            <param name="element">The WebElement on which to click</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.ClickLink(OpenQA.Selenium.IWebElement,Liberator.Driver.RatClock,System.Boolean)">
            <summary>
            Clicks on a WebElement
            </summary>
            <param name="element">The WebElement on which to click</param>
            <param name="clock">A clock that may be used to set custom timeouts</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.ClickLink(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Clicks on a WebElement
            </summary>
            <param name="locator">The locator for the WebElement on which to click</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.ClickLink(OpenQA.Selenium.By,Liberator.Driver.RatClock,System.Boolean)">
            <summary>
            Clicks on a WebElement
            </summary>
            <param name="locator">The locator for the WebElement on which to click</param>
            <param name="clock">A clock that may be used to set custom timeouts</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.ClickLinkAndWait(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Clicks on a link and waits for a new page to be loaded
            </summary>
            <param name="element">The element on which to click</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.ClickLinkAndWait(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Clicks on a link and waits for a new page to be loaded
            </summary>
            <param name="locator">The element on which to click</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.GetElementText(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Gets the text of a WebElement
            </summary>
            <param name="element">The WebElement from which to retrieve text</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>The text of the WebElement</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.GetElementText(OpenQA.Selenium.IWebElement,Liberator.Driver.RatClock,System.Boolean)">
            <summary>
            Gets the text of a WebElement
            </summary>
            <param name="element">The WebElement from which to retrieve text</param>
            <param name="clock">A clock that may be used to set custom timeouts</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>The text of the WebElement</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.GetElementText(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Gets the text of a WebElement
            </summary>
            <param name="locator">The WebElement from which to retrieve text</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>The text of the WebElement</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.GetElementText(OpenQA.Selenium.By,Liberator.Driver.RatClock,System.Boolean)">
            <summary>
            Gets the text of a WebElement
            </summary>
            <param name="locator">The WebElement from which to retrieve text</param>
            <param name="clock">A clock that may be used to set custom timeouts</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>The text of the WebElement</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.ElementExists(OpenQA.Selenium.IWebElement)">
            <summary>
            Checks the browser for the presence of a particular WebElement
            </summary>
            <param name="element">The WebElement whose presence is tested</param>
            <returns>True if the WebElement is present; false if the WebElement is not present</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.ElementExists(OpenQA.Selenium.By)">
            <summary>
            Checks the browser for the presence of a particular WebElement
            </summary>
            <param name="locator">The locator for the WebElement whose presence is tested</param>
            <returns>True if the WebElement is present; false if the WebElement is not present</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.GetElementAttribute(OpenQA.Selenium.IWebElement,System.String,System.Boolean)">
            <summary>
            Gets an attribute of a WebElement and returns it as text
            </summary>
            <param name="element">The WebElement whose attributes are to be tested</param>
            <param name="attribute">The attribute value to retrieve</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>True if the WebElement is present; false if the WebElement is not present</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.GetElementAttribute(OpenQA.Selenium.IWebElement,System.String,Liberator.Driver.RatClock,System.Boolean)">
            <summary>
            Gets an attribute of a WebElement and returns it as text
            </summary>
            <param name="element">The WebElement whose attributes are to be tested</param>
            <param name="attribute">The attribute value to retrieve</param>
            <param name="clock">A clock that may be used to set custom timeouts</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>The attribute to retrieve</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.GetElementAttribute(OpenQA.Selenium.By,System.String,System.Boolean)">
            <summary>
            Gets an attribute of a WebElement and returns it as text
            </summary>
            <param name="locator">The locator for the WebElement whose attributes are to be tested</param>
            <param name="attribute">The attribute value to retrieve</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>The attribute to retrieve</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.GetElementAttribute(OpenQA.Selenium.By,System.String,Liberator.Driver.RatClock,System.Boolean)">
            <summary>
            Gets an attribute of a WebElement and returns it as text
            </summary>
            <param name="locator">The locator for the WebElement whose attributes are to be tested</param>
            <param name="attribute">The attribute value to retrieve</param>
            <param name="clock">A clock that may be used to set custom timeouts</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>The attribute to retrieve</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindElementByCssSelector(System.String,System.Boolean)">
            <summary>
            Finds an element with a unique CSS Selector
            </summary>
            <param name="cssSelector">The CSS Selector to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A WebElements that has the CSS Selector</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindElementsByCssSelector(System.String,System.Boolean)">
            <summary>
            Finds a list of elements that share a CSS Selector
            </summary>
            <param name="cssSelector">The CSS Selector to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of WebElements that share the CSS Selector</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindSubElementsByCssSelector(System.String,OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a CSS Selector
            </summary>
            <param name="cssSelector">The CSS Selector to search for</param>
            <param name="element">The parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindSubElementsByCssSelector(System.String,OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a CSS Selector
            </summary>
            <param name="cssSelector">The CSS Selector to search for</param>
            <param name="locator">The locator for the parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindElementByClassName(System.String,System.Boolean)">
            <summary>
            Finds a WebElement that has a Class Name
            </summary>
            <param name="className">The Class Name to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A WebElement described by the Class Name</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindElementsByClassName(System.String,System.Boolean)">
            <summary>
            Finds a list of elements that share a Class Name
            </summary>
            <param name="className">The Class Name to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindSubElementsByClassName(System.String,OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a Class Name
            </summary>
            <param name="className">The Class Name to search for</param>
            <param name="element">The parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindSubElementsByClassName(System.String,OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a Class Name
            </summary>
            <param name="cssSelector">The Class Name to search for</param>
            <param name="locator">The locator for the parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindElementById(System.String,System.Boolean)">
            <summary>
            Finds a WebElement whose id is as specified
            </summary>
            <param name="id">The id to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A WebElement with the specified id</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindElementByLinkText(System.String,System.Boolean)">
            <summary>
            Finds a WebElement whose link text is as specified
            </summary>
            <param name="linkText">The text to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A WebElement with the specified Link Text</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindElementsByLinkText(System.String,System.Boolean)">
            <summary>
            Finds a list of elements that whose link text is as specified
            </summary>
            <param name="linkText">The text to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindSubElementsByLinkText(System.String,OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement whose link text is as specified
            </summary>
            <param name="linkText">The text to search for</param>
            <param name="element">The parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindSubElementsByLinkText(System.String,OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement whose link text is as specified
            </summary>
            <param name="linkText">The text to search for</param>
            <param name="locator">The locator for the parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindElementByName(System.String,System.Boolean)">
            <summary>
            Finds a WebElement by name
            </summary>
            <param name="name">The name to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindElementsByName(System.String,System.Boolean)">
            <summary>
            Finds a list of elements that share a name
            </summary>
            <param name="name">The name to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindSubElementsByName(System.String,OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a name
            </summary>
            <param name="name">The name to search for</param>
            <param name="element">The parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindSubElementsByName(System.String,OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a name
            </summary>
            <param name="name">The name to search for</param>
            <param name="locator">The locator for the parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindElementByPartialLinkText(System.String,System.Boolean)">
            <summary>
            Finds a WebElement whose link text is matched in part
            </summary>
            <param name="linkText">The text to find in whole or in part</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A WebElement</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindElementsByPartialLinkText(System.String,System.Boolean)">
            <summary>
            Finds a list of elements whose link text is matched in part
            </summary>
            <param name="linkText">The text to find in whole or in part</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindSubElementsByPartialLinkText(System.String,OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement whose link text is matched in part
            </summary>
            <param name="linkText">The text to find in whole or in part</param>
            <param name="element">The parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindSubElementsByPartialLinkText(System.String,OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement whose link text is matched in part
            </summary>
            <param name="linkText">The text to find in whole or in part</param>
            <param name="locator">The locator for the parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindElementByTag(System.String,System.Boolean)">
            <summary>
            Finds a WebElement that possesses a tag
            </summary>
            <param name="tagName">The tag to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A WebElement</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindElementsByTag(System.String,System.Boolean)">
            <summary>
            Finds a list of elements that share a tag
            </summary>
            <param name="tagName">The tage to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindSubElementsByTag(System.String,OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a tag
            </summary>
            <param name="tagName">The tage to search for</param>
            <param name="element">The parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindSubElementsByTag(System.String,OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a tag
            </summary>
            <param name="tagName">The tag to search for</param>
            <param name="locator">The locator for the parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindElementByXPath(System.String,System.Boolean)">
            <summary>
            Finds a WebEements by its xpath
            </summary>
            <param name="xpath">The xpath to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A WebElement</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindElementsByXPath(System.String,System.Boolean)">
            <summary>
            Finds a list of elements that share an xpath
            </summary>
            <param name="xpath">The xpath to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindSubElementsByXPath(System.String,OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share an xpath
            </summary>
            <param name="xpath">The xpath to search for</param>
            <param name="element">The parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.FindSubElementsByXPath(System.String,OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share an xpath
            </summary>
            <param name="xpath">The xpath to search for</param>
            <param name="locator">The locator for the parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.ExtractElementFromCollectionByAttribute(OpenQA.Selenium.IWebElement,Liberator.Driver.Enums.EnumLocatorType,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Finds a WebElement identified by an attribite value from a collection of WebElements sharing a parent
            </summary>
            <param name="parentElement">The parent element for the process</param>
            <param name="type">The type of locator to use to fetch the collection</param>
            <param name="locator">The locator value for items in the collection</param>
            <param name="attribute">The HTML attribute to use to find the unique item</param>
            <param name="value">The value of the attribute of the unique item</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A web element identified by a locator type and an attribute value</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.ExtractElementFromCollectionByAttribute(OpenQA.Selenium.By,Liberator.Driver.Enums.EnumLocatorType,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Finds a WebElement identified by an attribite value from a collection of WebElements sharing a parent
            </summary>
            <param name="parentLocator">The locator for the parent element for the process</param>
            <param name="type">The type of locator to use to fetch the collection</param>
            <param name="locator">The locator value for items in the collection</param>
            <param name="attribute">The HTML attribute to use to find the unique item</param>
            <param name="value">The value of the attribute of the unique item</param>
            <param name="wait">(Optional parameter) Whether to wait for the element to reach a known state</param>
            <returns>A web element identified by a locator type and an attribute value</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.TakeScreenshot(System.String)">
            <summary>
            Takes a screenshot of the active web page
            </summary>
            <param name="path">The path and name under which to save the image</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.Scripts">
            <summary>
            Returns a JavaScript Executor to the end user for custom JavaScript
            </summary>
            <returns>A JavaScript Executor</returns>
        </member>
        <member name="M:Liberator.Driver.IRodent.ExecuteJavaScript(System.String)">
            <summary>
            Executes a JavaScript statement passed as a string
            </summary>
            <param name="script">The JavaScript to be executed</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.ExecuteJavaScript(System.String,System.Object[])">
            <summary>
            Executes a JavaScript statement passed as a string
            </summary>
            <param name="script">The JavaScript to be executed</param>
            <param name="parameters">The parameters for the passed JavaScript</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.ExecuteAsyncJavaScript(System.String)">
            <summary>
            Executes a JavaScript statement passed as a string
            </summary>
            <param name="script">The JavaScript to be executed</param>
        </member>
        <member name="M:Liberator.Driver.IRodent.ExecuteAsyncJavaScript(System.String,System.Object[])">
            <summary>
            Executes a JavaScript statement passed as a string
            </summary>
            <param name="script">The JavaScript to be executed</param>
            <param name="parameters">The parameters for the passed JavaScript</param>
        </member>
        <member name="T:Liberator.Driver.Performance.EnumTiming">
            <summary>
            Enumeraion of timing points for performance metrics
            </summary>
        </member>
        <member name="F:Liberator.Driver.Performance.EnumTiming.NotSpecified">
            <summary>
            Timing point not specified
            </summary>
        </member>
        <member name="F:Liberator.Driver.Performance.EnumTiming.GenericTiming">
            <summary>
            Generic timing point
            </summary>
        </member>
        <member name="F:Liberator.Driver.Performance.EnumTiming.Instantiation">
            <summary>
            Timing point for instance creation
            </summary>
        </member>
        <member name="F:Liberator.Driver.Performance.EnumTiming.PageLoad">
            <summary>
            Page load timing point
            </summary>
        </member>
        <member name="T:Liberator.Driver.Performance.ITimer">
            <summary>
            Root interface for timer implementations
            </summary>
        </member>
        <member name="P:Liberator.Driver.Performance.ITimer.StartTime">
            <summary>
            Start time of the timer
            </summary>
        </member>
        <member name="P:Liberator.Driver.Performance.ITimer.EndTime">
            <summary>
            End time for the timer
            </summary>
        </member>
        <member name="P:Liberator.Driver.Performance.ITimer.Duration">
            <summary>
            Duration for the timer instance
            </summary>
        </member>
        <member name="M:Liberator.Driver.Performance.ITimer.Start">
            <summary>
            Start the timer
            </summary>
        </member>
        <member name="M:Liberator.Driver.Performance.ITimer.Stop">
            <summary>
            Stop the timer
            </summary>
        </member>
        <member name="T:Liberator.Driver.Performance.RatTimer">
            <summary>
            Timer for RatDriver
            </summary>
        </member>
        <member name="P:Liberator.Driver.Performance.RatTimer.StartTime">
            <summary>
            Start time for the timer
            </summary>
        </member>
        <member name="P:Liberator.Driver.Performance.RatTimer.EndTime">
            <summary>
            End time for the timer
            </summary>
        </member>
        <member name="P:Liberator.Driver.Performance.RatTimer.Duration">
            <summary>
            Duration for the timer instance
            </summary>
        </member>
        <member name="M:Liberator.Driver.Performance.RatTimer.#ctor">
            <summary>
            Constructor for the RatTimer class
            </summary>
        </member>
        <member name="M:Liberator.Driver.Performance.RatTimer.Start">
            <summary>
            Starts the time and resets the duration
            </summary>
        </member>
        <member name="M:Liberator.Driver.Performance.RatTimer.Stop">
            <summary>
            Stops the timer and calculates the duration
            </summary>
        </member>
        <member name="T:Liberator.Driver.Performance.RatWatch">
            <summary>
            A control class for RatDriver performance metrics
            </summary>
        </member>
        <member name="P:Liberator.Driver.Performance.RatWatch.Timings">
            <summary>
            Contains the timings for the current analysis cycle
            </summary>
        </member>
        <member name="P:Liberator.Driver.Performance.RatWatch.CurrentTimer">
            <summary>
            The timer currently being used
            </summary>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatch.#ctor">
            <summary>
            Constructor for the RatWatch class
            </summary>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatch.StartTimer">
            <summary>
            Creates a new timer and starts the count
            </summary>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatch.StopTimer">
            <summary>
            Stops the timer and adds it to the timings list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatch.StopTimer(Liberator.Driver.Performance.EnumTiming)">
            <summary>
            Stops the timer and adds a specified timing point type to th timings list
            </summary>
            <param name="timerType"></param>
            <returns></returns>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatch.ArithmeticMean">
            <summary>
            Calculates the arithmetic mean for the timings list
            </summary>
            <returns>The arithmetic mean for the timings list</returns>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatch.GeometricMean">
            <summary>
            Calculates the geometric mean for the timings list
            </summary>
            <returns>The geometic mean for the timings list</returns>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatch.HarmonicMean">
            <summary>
            Calculates the harmonic mean for the timings list
            </summary>
            <returns>The harmonic mean for the timings list</returns>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatch.Median">
            <summary>
            Calculates the median value for the timings list
            </summary>
            <returns>The median time for the entries in the timing list</returns>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatch.Skewness">
            <summary>
            Calculates the Skewness of the values in the timings list
            </summary>
            <returns>The skewness of the timings list away from the mean</returns>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatch.StandardDeviation">
            <summary>
            Caculates the standard deviation of the timings sample
            </summary>
            <returns>The standard deviation of the sample</returns>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatch.UpperQuartile">
            <summary>
            Calculates the boundary for the upper quartile of the timings list
            </summary>
            <returns>The point represneting the 75th percentile</returns>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatch.Variance">
            <summary>
            The variance of the timings list sample
            </summary>
            <returns>How far the timings list values are spread out from the mean</returns>
        </member>
        <member name="T:Liberator.Driver.Performance.RatWatchDriver`1">
            <summary>
            Performance enabled web driver
            </summary>
            <typeparam name="TWebDriver">The type of web driver to use</typeparam>
        </member>
        <member name="F:Liberator.Driver.Performance.RatWatchDriver`1.Driver">
            <summary>
            Holds an instance of the driver
            </summary>
        </member>
        <member name="F:Liberator.Driver.Performance.RatWatchDriver`1.FiringDriver">
            <summary>
            Allows a WebDriver to register for events
            </summary>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatchDriver`1.#ctor(`0)">
            <summary>
            Enhances the passed WebDriver with event handlers
            </summary>
            <param name="driver">A copy of a WebDriver instance</param>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatchDriver`1.FiringDriver_ScriptExecuting(System.Object,OpenQA.Selenium.Support.Events.WebDriverScriptEventArgs)">
            <summary>
            Handles the script executing event
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">Arguments for the web driver script event</param>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatchDriver`1.FiringDriver_ScriptExecuted(System.Object,OpenQA.Selenium.Support.Events.WebDriverScriptEventArgs)">
            <summary>
            Handles the script executed event
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">Arguments for the web driver script event</param>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatchDriver`1.FiringDriver_NavigatingForward(System.Object,OpenQA.Selenium.Support.Events.WebDriverNavigationEventArgs)">
            <summary>
            Handles the navigating forward event
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">Arguments for the web driver navigation event</param>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatchDriver`1.FiringDriver_NavigatingBack(System.Object,OpenQA.Selenium.Support.Events.WebDriverNavigationEventArgs)">
            <summary>
            Handles the navigating back event
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">Arguments for the web driver navigating back event</param>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatchDriver`1.FiringDriver_Navigating(System.Object,OpenQA.Selenium.Support.Events.WebDriverNavigationEventArgs)">
            <summary>
            Handles the navigating event
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">Arguments for the web driver navigating event</param>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatchDriver`1.FiringDriver_NavigatedForward(System.Object,OpenQA.Selenium.Support.Events.WebDriverNavigationEventArgs)">
            <summary>
            Handles the navigated forward event
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">Arguments for the web driver navigated forward event</param>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatchDriver`1.FiringDriver_NavigatedBack(System.Object,OpenQA.Selenium.Support.Events.WebDriverNavigationEventArgs)">
            <summary>
            Handles the navigated back event
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">Arguments for the web driver navigated back event</param>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatchDriver`1.FiringDriver_Navigated(System.Object,OpenQA.Selenium.Support.Events.WebDriverNavigationEventArgs)">
            <summary>
            Handles the navigated event
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">Arguments for the web driver navigated event</param>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatchDriver`1.FiringDriver_FindingElement(System.Object,OpenQA.Selenium.Support.Events.FindElementEventArgs)">
            <summary>
            Handles the find element event
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">Arguments for the web driver finding element event</param>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatchDriver`1.FiringDriver_FindElementCompleted(System.Object,OpenQA.Selenium.Support.Events.FindElementEventArgs)">
            <summary>
            Handles the find element completed event
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">Arguments for the web driver found element event</param>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatchDriver`1.FiringDriver_ExceptionThrown(System.Object,OpenQA.Selenium.Support.Events.WebDriverExceptionEventArgs)">
            <summary>
            Handles the exception thrown event
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">Arguments for the web driver exception thrown event</param>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatchDriver`1.FiringDriver_ElementValueChanging(System.Object,OpenQA.Selenium.Support.Events.WebElementEventArgs)">
            <summary>
            Handles the element value changing event
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">Arguments for the web driver element value changing event</param>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatchDriver`1.FiringDriver_ElementValueChanged(System.Object,OpenQA.Selenium.Support.Events.WebElementEventArgs)">
            <summary>
            Handles the element value changed event
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">The arguments for the element value changes event</param>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatchDriver`1.FiringDriver_ElementClicking(System.Object,OpenQA.Selenium.Support.Events.WebElementEventArgs)">
            <summary>
            Handles the element clicking event
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">The arguments for the element clicking event</param>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatchDriver`1.FiringDriver_ElementClicked(System.Object,OpenQA.Selenium.Support.Events.WebElementEventArgs)">
            <summary>
            Handles the element clicked event
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">The arguments for the element clicked event</param>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatchDriver`1.Dispose(System.Boolean)">
            <summary>
            Provides a method for disposing of the instance
            </summary>
            <param name="disposing">Whether the method is disposing</param>
        </member>
        <member name="M:Liberator.Driver.Performance.RatWatchDriver`1.Dispose">
            <summary>
            Disposes of the instance
            </summary>
        </member>
        <member name="T:Liberator.Driver.Preferences.BaseSettings">
            <summary>
            Base settings for RAT Driver
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.BaseSettings.Timeout">
            <summary>
            Standard timeout
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.BaseSettings.Sleep">
            <summary>
            The length of time to sleep
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.BaseSettings.ImplicitWait">
            <summary>
            Implicit wait value for WebDriver
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.BaseSettings.MenuHoverTime">
            <summary>
            The amount of time to keep a hover active
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.BaseSettings.PageLoad">
            <summary>
            Page Load wait time
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.BaseSettings.AsyncJavaScript">
            <summary>
            Asynchronous JavaScript wait time
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.BaseSettings.AlertHandling">
            <summary>
            Whether to allow RatDriver to handle alerts
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.BaseSettings.InternalTimers">
            <summary>
            Whether to use internal timers
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.BaseSettings.ChromeDriverLocation">
            <summary>
            Location of Chrome Driver. Defaults to the supplied version.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.BaseSettings.EdgeDriverLocation">
            <summary>
            Location of the Microsoft Web Driver. Defaults to the supplied version.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.BaseSettings.FirefoxDriverLocation">
            <summary>
            Location of the Firefox Driver. Defaults to the supplied version.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.BaseSettings.InternetExplorerDriverLocation">
            <summary>
            Location of the IEDriverServer executable. Defaults to the supplied version.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.BaseSettings.OperaDriverLocation">
            <summary>
            Location of the Opera Driver. Defaults to the supplied version.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.BaseSettings.ChromeLocation">
            <summary>
            Location of the Chrome application
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.BaseSettings.FirefoxLocation">
            <summary>
            Locations of the Firefox application
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.BaseSettings.OperaLocation">
            <summary>
            Location of the Opera application
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.BaseSettings.DebugLevel">
            <summary>
            The debug level to use for the test run
            </summary>
        </member>
        <member name="M:Liberator.Driver.Preferences.BaseSettings.GetGrandfatherDirectory">
            <summary>
            Gets the grandfather directory for the current test assembly
            </summary>
            <returns>The grandfather directory</returns>
        </member>
        <member name="M:Liberator.Driver.Preferences.BaseSettings.FindExecutables(System.String,System.String)">
            <summary>
            Finds all files with a specified name in a specified directory.
            </summary>
            <param name="pathToSearch">Path to search for files.</param>
            <param name="fileToFind">File name to find.</param>
            <returns>An array of file paths that fit the search parameters.</returns>
        </member>
        <member name="T:Liberator.Driver.Preferences.Chrome">
            <summary>
            Preferences for ChromeDriver
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.BinaryLocation">
            <summary>
            Gets or sets the location of the Chrome browser's binary executable file.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.DebuggerAddress">
            <summary>
            Gets or sets the address of a Chrome debugger server to connect to. Should be of the form "{hostname|IP address}:port".
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.LeaveBrowserRunning">
            <summary>
            Gets or sets a value indicating whether Chrome should be left running after the ChromeDriver instance is exited. Defaults to false.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.MinidumpPath">
            <summary>
            Gets or sets the directory in which to store minidump files.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.BufferUsageReportingInterval">
            <summary>
            Gets or sets the interval between Chrome DevTools trace buffer usage events. Defaults to 1000 milliseconds.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.IsCollectingNetworkEvents">
            <summary>
            Gets or sets a value indicating whether Chrome will collect events from the Network domain. Defaults to true.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.IsCollectingPageEvents">
            <summary>
            Gets or sets a value indicating whether Chrome will collect events from the Page domain. Defaults to true.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.CapabilityList">
            <summary>
            List of browser capabilities in the format {name}={value}|{type}
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.TracingCategories">
            <summary>
            Gets a comma-separated list of the categories for which tracing is enabled.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.ExtensionsList">
            <summary>
            Comma separated list of extension locations
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.LocalStatePreferences">
            <summary>
            Comma separated list of local state preferences in the format {name}={value}|{type}
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.UserProfilePreferences">
            <summary>
            Comma separated list of user profile preferences in the format {name}={value}|{type}
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.AndroidDebugBridgePort">
            <summary>
            Gets or sets the port on which the Android Debug Bridge is listening for commands.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.EnableVerboseLogging">
            <summary>
            Gets or sets a value indicating whether to enable verbose logging for the ChromeDriver executable. Defaults to false.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.HideCommandPromptWindow">
            <summary>
            Gets or sets a value indicating whether the command prompt window of the service should be hidden.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.LogPath">
            <summary>
            Gets or sets the location of the log file written to by the ChromeDriver executable.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.Port">
            <summary>
            Gets or sets the port of the service.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.PortServerAddress">
            <summary>
            Gets or sets the address of a server to contact for reserving a port.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.SuppressInitialDiagnosticInformation">
            <summary>
            Gets or sets a value indicating whether the initial diagnostic information is
            suppressed when starting the driver server executable. Defaults to false, meaning
            diagnostic information should be shown by the driver server executable.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.WhitelistedIPAddresses">
            <summary>
            Gets or sets the comma-delimited list of IP addresses that are approved to connect
            to this instance of the Chrome driver. Defaults to an empty string, which means
            only the local loopback address can connect.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.EnableTouchEvents">
            <summary>
            Gets or sets a value indicating whether touch events should be enabled by the browser when emulating a mobile device. Defaults to true.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.Height">
            <summary>
            Gets or sets the height in pixels to be used by the browser when emulating a mobile device.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.PixelRatio">
            <summary>
            Gets or sets the pixel ratio to be used by the browser when emulating a mobile device.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.UserAgent">
            <summary>
            Gets or sets the user agent string to be used by the browser when emulating a mobile device.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Chrome.Width">
            <summary>
            Gets or sets the width in pixels to be used by the browser when emulating a mobile device.
            </summary>
        </member>
        <member name="T:Liberator.Driver.Preferences.Edge">
            <summary>
            Preferences for EdgeDriver
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Edge.HideCommandPromptWindow">
            <summary>
            Gets or sets a value indicating whether the command prompt window of the service should be hidden.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Edge.Port">
            <summary>
            Gets or sets the port of the service.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Edge.SuppressInitialDiagnosticInformation">
            <summary>
            Gets or sets a value indicating whether the initial diagnostic information is
            suppressed when starting the driver server executable. Defaults to false, meaning
            diagnostic information should be shown by the driver server executable.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Edge.UseVerboseLogging">
            <summary>
            Gets or sets a value indicating whether to enable verbose logging for the ChromeDriver executable. Defaults to false.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Edge.Host">
            <summary>
            Gets or sets the value of the host adapter on which the Edge driver service should listen for connections
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Edge.Package">
            <summary>
            Gets or sets the value of the package the Edge driver service will launch and automate.
            </summary>
        </member>
        <member name="T:Liberator.Driver.Preferences.Firefox">
            <summary>
            Preferences for FirefoxDriver
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Firefox.LogLevel">
            <summary>
            Gets or sets the logging level of the Firefox driver.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Firefox.ProfileDirectory">
            <summary>
            Gets the directory containing the profile.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Firefox.CleanProfile">
            <summary>
            Cleans this Firefox profile.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Firefox.UseLegacyImplementation">
            <summary>
            Gets or sets a value indicating whether to use the legacy driver implementation.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Firefox.AcceptUntrustedCertificates">
            <summary>
            Gets or sets a value indicating whether Firefox should accept SSL certificates
            which have expired, signed by an unknown authority or are generally untrusted.
            Set to true by default.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Firefox.AlwaysLoadNoFocusLibrary">
            <summary>
            Gets or sets a value indicating whether to always load the library for allowing
            Firefox to execute commands without its window having focus.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Firefox.AssumeUntrustedCertificateIssuer">
            <summary>
            Gets or sets a value indicating whether Firefox assume untrusted SSL certificates
            come from an untrusted issuer or are self-signed. Set to true by default.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Firefox.DeleteAfterUse">
            <summary>
            Gets or sets a value indicating whether to delete this profile after use with the OpenQA.Selenium.Firefox.FirefoxDriver.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Firefox.EnableNativeEvents">
            <summary>
            Gets or sets a value indicating whether native events are enabled.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Firefox.Port">
            <summary>
            Gets or sets the port on which the profile connects to the WebDriver extension.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Firefox.ProxyPreferences">
            <summary>
            Comma separated list of proxy preferences in the format {name}={value}|{type}
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Firefox.CommunicationPort">
            <summary>
            Gets or sets the port used by the driver executable to communicate with the browser.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Firefox.ConnectToRunningBrowser">
            <summary>
            Gets or sets a value indicating whether to connect to an already-running instance of Firefox.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Firefox.HideCommandPromptWindow">
            <summary>
            Gets or sets a value indicating whether the command prompt window of the service should be hidden.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Firefox.Host">
            <summary>
            Gets or sets the value of the IP address of the host adapter on which the service should listen for connections.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Firefox.SuppressInitialDiagnosticInformation">
            <summary>
            Gets or sets a value indicating whether the initial diagnostic information is
            suppressed when starting the driver server executable. Defaults to false, meaning
            diagnostic information should be shown by the driver server executable.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Firefox.Preferences">
            <summary>
            Comma separated list of preferences in the format {name}={value}|{type}
            </summary>
        </member>
        <member name="T:Liberator.Driver.Preferences.InternetExplorer">
            <summary>
            Preferences for Internet Explorer Driver Server
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.CommandLineArguments">
            <summary>
            Gets or sets the command line arguments used in launching Internet Explorer when the Windows CreateProcess API is used. This property only has an effect when the OpenQA.Selenium.IE.InternetExplorerOptions.ForceCreateProcessApi is true.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.ScrollBehavior">
            <summary>
            Gets or sets the value for describing how elements are scrolled into view in the IE driver. Defaults to scrolling the element to the top of the viewport.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.EnableFullPageScreenshot">
            <summary>
            
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.EnableNativeEvents">
            <summary>
            Gets or sets a value indicating whether to use native events in interacting with elements.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.EnablePersistentHover">
            <summary>
            Gets or sets a value indicating whether to enable persistently sending WM_MOUSEMOVE messages to the IE window during a mouse hover.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.EnsureCleanSession">
            <summary>
            Gets or sets a value indicating whether to clear the Internet Explorer cache before launching the browser. When set to true, clears the system cache for all instances of Internet Explorer, even those already running when the driven instance is launched. Defaults to false.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.ForceCreateProcessApi">
            <summary>
            Gets or sets a value indicating whether to force the use of the Windows CreateProcess API when launching Internet Explorer. The default value is false.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.ForceShellWindowsApi">
            <summary>
            Gets or sets a value indicating whether to force the use of the Windows ShellWindows API when attaching to Internet Explorer. The default value is false.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.IgnoreZoomLevel">
            <summary>
            Gets or sets a value indicating whether to ignore the zoom level of Internet Explorer .
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.InitialBrowserUrl">
            <summary>
            Gets or sets the initial URL displayed when IE is launched. If not set, the browser launches with the internal startup page for the WebDriver server.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.IntroduceInstability">
            <summary>
            Gets or sets a value indicating whether to ignore the settings of the Internet Explorer Protected Mode.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.PageLoadStrategy">
            <summary>
            Gets or sets the value for describing how the browser is to wait for pages to load in the browser. Defaults to OpenQA.Selenium.PageLoadStrategy.Default.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.RequireWindowFocus">
            <summary>
            Gets or sets a value indicating whether to require the browser window to have focus before interacting with elements.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.UnexpectedAlertBehavior">
            <summary>
            Gets or sets the value for describing how unexpected alerts are to be handled in the browser. Defaults to OpenQA.Selenium.UnhandledPromptBehavior.Default.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.UsePerProcessProxy">
            <summary>
            Gets or sets a value indicating whether to use the supplied OpenQA.Selenium.Proxy settings on a per-process basis, not updating the system installed proxy setting. This property is only valid when setting a OpenQA.Selenium.Proxy, where the OpenQA.Selenium.Proxy.Kind property is either OpenQA.Selenium.ProxyKind.Direct, OpenQA.Selenium.ProxyKind.System, or OpenQA.Selenium.ProxyKind.Manual, and is otherwise ignored. Defaults to false.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.HideCommandPromptWindow">
            <summary>
            Gets or sets a value indicating whether the command prompt window of the service should be hidden.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.Host">
            <summary>
            Gets or sets the value of the host adapter on which the IEDriverServer should listen for connections.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.LibraryExtractionPath">
            <summary>
            Gets or sets the path to which the supporting library of the IEDriverServer.exe is extracted. Defaults to the temp directory if this property is not set.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.LogFile">
            <summary>
            Gets or sets the location of the log file written to by the IEDriverServer.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.LoggingLevel">
            <summary>
            Gets or sets the logging level used by the IEDriverServer.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.Port">
            <summary>
            Gets or sets the port of the service.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.SuppressInitialDiagnosticInformation">
            <summary>
            Gets or sets a value indicating whether the initial diagnostic information is suppressed when starting the driver server executable. Defaults to false, meaning diagnostic information should be shown by the driver server executable.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.WhitelistedIPAddresses">
            <summary>
            Gets or sets the comma-delimited list of IP addresses that are approved to connect to this instance of the IEDriverServer. Defaults to an empty string, which means only the local loopback address can connect.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.FtpProxy">
            <summary>
            Gets or sets the value of the proxy for the FTP protocol.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.HttpProxy">
            <summary>
            Gets or sets the value of the proxy for the HTTP protocol.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.IsAutoDetect">
            <summary>
            Gets or sets a value indicating whether the proxy uses automatic detection.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.ProxyKind">
            <summary>
            Gets or sets the type of proxy.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.NoProxy">
            <summary>
            Gets or sets the value for bypass proxy addresses.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.ProxyAutoConfigUrl">
            <summary>
            Gets or sets the URL used for proxy automatic configuration.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.SocksPassword">
            <summary>
            Gets or sets the value of password for the SOCKS proxy.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.SocksProxy">
            <summary>
            Gets or sets the value of the proxy for the SOCKS protocol.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.SocksUserName">
            <summary>
            Gets or sets the value of username for the SOCKS proxy.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.SslProxy">
            <summary>
            Gets or sets the value of the proxy for the SSL protocol.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.InternetExplorer.FileUploadTimeout">
            <summary>
            Gets or sets the amount of time the driver will attempt to look for the file selection dialog when attempting to upload a file.
            </summary>
        </member>
        <member name="T:Liberator.Driver.Preferences.Opera">
            <summary>
            Preferences for the Opera Driver
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Opera.DebuggerAddress">
            <summary>
            Gets or sets the address of a Opera debugger server to connect to. Should be of the form "{hostname|IP address}:port".
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Opera.LeaveBrowserRunning">
            <summary>
            Gets or sets a value indicating whether Opera should be left running after the OperaDriver instance is exited. Defaults to false.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Opera.MinidumpPath">
            <summary>
            Gets or sets the directory in which to store minidump files.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Opera.AndroidDebugBridgePort">
            <summary>
            Gets or sets the port on which the Android Debug Bridge is listening for commands.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Opera.EnableVerboseLogging">
            <summary>
            Gets or sets a value indicating whether to enable verbose logging for the OperaDriver executable. Defaults to false.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Opera.HideCommandPromptWindow">
            <summary>
            Gets or sets a value indicating whether the command prompt window of the service should be hidden.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Opera.LogPath">
            <summary>
            Gets or sets the location of the log file written to by the OperaDriver executable.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Opera.Port">
            <summary>
            Gets or sets the port of the service.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Opera.PortServerAddress">
            <summary>
            Gets or sets the address of a server to contact for reserving a port.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Opera.SuppressInitialDiagnosticInformation">
            <summary>
            Gets or sets a value indicating whether the initial diagnostic information is
            suppressed when starting the driver server executable. Defaults to false, meaning
            diagnostic information should be shown by the driver server executable.
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Opera.UrlPathPrefix">
            <summary>
            Gets or sets the base URL path prefix for commands (e.g., "wd/url").
            </summary>
        </member>
        <member name="T:Liberator.Driver.Preferences.Remote">
            <summary>
            Preferences for Remote Drivers
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Remote.DefaultRemoteAddress">
            <summary>
            Default address for the Web Driver
            </summary>
        </member>
        <member name="P:Liberator.Driver.Preferences.Remote.DesiredCapabilities">
            <summary>
            Capabilities of the browser that you are going to use
            </summary>
        </member>
        <member name="T:Liberator.Driver.RatClock">
            <summary>
            Provides an implementation of the IClock class for RatDriver
            </summary>
        </member>
        <member name="M:Liberator.Driver.RatClock.IsNowBefore(System.DateTime)">
            <summary>
            Used to verify whether the event has executed within a set time period
            </summary>
            <param name="otherDateTime">The expected end to the event execution</param>
            <returns>Whether the event has completed in the specified time period</returns>
        </member>
        <member name="M:Liberator.Driver.RatClock.LaterBy(System.TimeSpan)">
            <summary>
            Sets the delay amount for the test
            </summary>
            <param name="delay">The delay time to set</param>
            <returns>The time of the expected end to the timed event</returns>
        </member>
        <member name="P:Liberator.Driver.RatClock.Now">
            <summary>
            Gets the current time
            </summary>
        </member>
        <member name="T:Liberator.Driver.RatDriver`1">
            <summary>
            Base class for the RatDriver emulation layer
            </summary>
            <typeparam name="TWebDriver">The type of web driver to create</typeparam>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.HoverOverMenu(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Moves the virtual cursor position to a WebElement which acts as a menu and hovers
            </summary>
            <param name="element">The WebElement acting as a menu</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.HoverOverMenu(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Moves the virtual cursor position to a WebElement which acts as a menu and hovers
            </summary>
            <param name="locator">The locator for the WebElement acting as a menu</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ClickAndHoverOverMenu(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Clicks on a WebElement acting as a menu and continues to hover
            </summary>
            <param name="element">The WebElement acting as a menu</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ClickAndHoverOverMenu(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Clicks on a WebElement acting as a menu and continues to hover
            </summary>
            <param name="locator">The locator for the WebElement acting as a menu</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ClickAndHoldMenu(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Clicks on a WebElement acting as a menu and continues to hold
            </summary>
            <param name="element">The WebElement acting as a menu</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ClickAndHoldMenu(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Clicks on a WebElement acting as a menu and continues to hold
            </summary>
            <param name="locator">The locator for the WebElement acting as a menu</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ClickContextualMenu(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Clicks on an element and displays a contextual menu
            </summary>
            <param name="element">The WebElement which is the target of the contextual menu click</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ClickContextualMenu(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Clicks on an element and displays a contextual menu
            </summary>
            <param name="locator">The locator for the WebElement which is the target of the contextual menu click</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.DoubleClick(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Double clicks on a WebElement
            </summary>
            <param name="element">The WebElement on which a double click is required</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.DoubleClick(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Double clicks on a WebElement
            </summary>
            <param name="locator">The locator for the WebElement which is the target of a double click</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.DragAndDrop(OpenQA.Selenium.IWebElement,OpenQA.Selenium.IWebElement,System.Boolean,System.Boolean)">
            <summary>
            Drags a WebElement over a target WebElement and drops it
            </summary>
            <param name="source">The Web Element being dragged</param>
            <param name="target">The target WebElement for the action</param>
            <param name="waitForSource">(Optional parameter) Whether to wait for the cliackability of the source element</param>
            <param name="waitForTarget">(Optional parameter) Whether to wait for the cliackability of the target element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.DragAndDrop(OpenQA.Selenium.By,OpenQA.Selenium.By,System.Boolean,System.Boolean)">
            <summary>
            Drags a WebElement over a target WebElement and drops it
            </summary>
            <param name="source">The locator for the Web Element being dragged</param>
            <param name="target">The locator for the target WebElement for the action</param>
            <param name="waitForSource">(Optional parameter) Whether to wait for the cliackability of the source element</param>
            <param name="waitForTarget">(Optional parameter) Whether to wait for the cliackability of the target element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.DragAndDropToOffset(OpenQA.Selenium.IWebElement,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Drags a WebElement and drops it at an offset position
            </summary>
            <param name="element">The WebElement being dragged</param>
            <param name="xOffset">The x coordinate of the offset position</param>
            <param name="yOffset">The y coordinate of the offset position</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.DragAndDropToOffset(OpenQA.Selenium.By,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Drags a WebElement and drops it at an offset position
            </summary>
            <param name="locator">The locator for the WebElement being dragged</param>
            <param name="xOffset">The x coordinate of the offset position</param>
            <param name="yOffset">The y coordinate of the offset position</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.KeyDownOnElement(OpenQA.Selenium.IWebElement,System.String,System.Boolean)">
            <summary>
            Moves the virtual cursor to a WebElement and presses a key
            </summary>
            <param name="element">The WebElement on which the key is to be pressed</param>
            <param name="key">The key to be pressed</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.KeyDownOnElement(OpenQA.Selenium.By,System.String,System.Boolean)">
            <summary>
            Moves the virtual cursor to a WebElement and presses a key
            </summary>
            <param name="locator">The locator for the WebElement on which the key is to be pressed</param>
            <param name="key">The key to be pressed</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.KeyUpOnElement(OpenQA.Selenium.IWebElement,System.String,System.Boolean)">
            <summary>
            Releases a depressed key which a WebElement is selected
            </summary>
            <param name="element">The target WebElement for the key release</param>
            <param name="key">The key to be released</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.KeyUpOnElement(OpenQA.Selenium.By,System.String,System.Boolean)">
            <summary>
            Releases a depressed key which a WebElement is selected
            </summary>
            <param name="locator">The locator for the target WebElement for the key release</param>
            <param name="key">The key to be released</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.MoveByOffset(OpenQA.Selenium.IWebElement,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the virtual cursor by an offset from a WebElement
            </summary>
            <param name="element">The WebElement from which the cursor will move</param>
            <param name="xOffset">The x coordinate offset for the movement</param>
            <param name="yOffset">The y coordinate offset for the movement</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.MoveByOffset(OpenQA.Selenium.By,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the virtual cursor by an offset from a WebElement
            </summary>
            <param name="locator">The locator for the WebElement from which the cursor will move</param>
            <param name="xOffset">The x coordinate offset for the movement</param>
            <param name="yOffset">The y coordinate offset for the movement</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.MoveToElementWithOffset(OpenQA.Selenium.IWebElement,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the virtual cursor by an offset from a WebElement
            </summary>
            <param name="element">The WebElement from which the cursor will move</param>
            <param name="xOffset">The x coordinate offset for the movement</param>
            <param name="yOffset">The y coordinate offset for the movement</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.MoveToElementWithOffset(OpenQA.Selenium.By,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the virtual cursor by an offset from a WebElement
            </summary>
            <param name="locator">The locator for the WebElement from which the cursor will move</param>
            <param name="xOffset">The x coordinate offset for the movement</param>
            <param name="yOffset">The y coordinate offset for the movement</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ReleaseMouseButton(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Releases the mouse button over a WebElement
            </summary>
            <param name="element">The WebElement over which to release the mouse button</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ReleaseMouseButton(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Releases the mouse button over a WebElement
            </summary>
            <param name="locator">The locator for the WebElement over which to release the mouse button</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.SendValueToField(OpenQA.Selenium.IWebElement,System.String,System.Boolean)">
            <summary>
            Sends a sequence of keystrokes to the WebElement specified
            </summary>
            <param name="element">The WebElement that receives the keystrokes</param>
            <param name="text">The keystrokes that are to be sent to the WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.SendValueToField(OpenQA.Selenium.By,System.String,System.Boolean)">
            <summary>
            Sends a sequence of keystrokes to the WebElement specified
            </summary>
            <param name="locator">The locator for the WebElement that receives the keystrokes</param>
            <param name="text">The keystrokes that are to be sent to the WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.SelectItemFromDropdown(OpenQA.Selenium.IWebElement,System.String,System.Boolean)">
            <summary>
            Selects an item from a dropdown by text value
            </summary>
            <param name="element">The dropdown menu</param>
            <param name="item">The item to choose</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.SelectItemFromDropdown(OpenQA.Selenium.By,System.String,System.Boolean)">
            <summary>
            Selects an item from a dropdown by text value
            </summary>
            <param name="locator">The locator for the dropdown menu</param>
            <param name="item">The item to choose</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.SelectRowFromDropdown(OpenQA.Selenium.IWebElement,System.Int32,System.Boolean)">
            <summary>
            Selects an item from a dropdown by text value
            </summary>
            <param name="element">The dropdown menu</param>
            <param name="row">The row to choose</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.SelectRowFromDropdown(OpenQA.Selenium.By,System.Int32,System.Boolean)">
            <summary>
            Selects an item from a dropdown by text value
            </summary>
            <param name="locator">The locator for the dropdown menu</param>
            <param name="row">The row to choose</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.SelectValueFromDropdown(OpenQA.Selenium.IWebElement,System.String,System.Boolean)">
            <summary>
            Selects an item from a dropdown by text value
            </summary>
            <param name="element">The dropdown menu</param>
            <param name="value">The value to choose</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.SelectValueFromDropdown(OpenQA.Selenium.By,System.String,System.Boolean)">
            <summary>
            Selects an item from a dropdown by text value
            </summary>
            <param name="locator">The locator for the dropdown menu</param>
            <param name="value">The value to choose</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.TakeScreenshot(System.String)">
            <summary>
            Takes a screenshot of the active web page
            </summary>
            <param name="path">The path and name under which to save the image</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.Scripts">
            <summary>
            Returns a JavaScript Executor to the end user for custom JavaScript
            </summary>
            <returns>A JavaScript Executor</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ExecuteJavaScript(System.String)">
            <summary>
            Executes a JavaScript statement passed as a string
            </summary>
            <param name="script">The JavaScript to be executed</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ExecuteJavaScript(System.String,System.Object[])">
            <summary>
            Executes a JavaScript statement passed as a string
            </summary>
            <param name="script">The JavaScript to be executed</param>
            <param name="parameters">The parameters for the passed JavaScript</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ExecuteAsyncJavaScript(System.String)">
            <summary>
            Executes a JavaScript statement passed as a string
            </summary>
            <param name="script">The JavaScript to be executed</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ExecuteAsyncJavaScript(System.String,System.Object[])">
            <summary>
            Executes a JavaScript statement passed as a string
            </summary>
            <param name="script">The JavaScript to be executed</param>
            <param name="parameters">The parameters for the passed JavaScript</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.#ctor(System.Boolean)">
            <summary>
            Base constructor for RatDriver
            </summary>
            <param name="performanceTimings">Whether to obtain performance timings for the browser.</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an anstance of Firefox with a specified profile
            </summary>
            <param name="profileName">The name of the profile to load</param>
            <param name="performanceTimings">Whether to obtain performance timings for the browser.</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a firefox instance using a profile directory path
            </summary>
            <param name="profileDirectory">The path of the profile directory</param>
            <param name="cleanDirectory">Whether to clean the directory</param>
            <param name="performanceTimings">Whether to obtain performance timings for the browser.</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.#ctor(Liberator.Driver.Enums.EnumPhoneType,System.Boolean,System.Boolean)">
            <summary>
            Creates a chrome driver instance in modile emulation mode
            </summary>
            <param name="type">Which type of phone to emulate</param>
            <param name="touch">(Optional Parameter) Whether touch actions are enabled</param>
            <param name="performanceTimings">Whether to obtain performance timings for the browser.</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.#ctor(System.Int64,System.Int64,System.String,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Creates a chrome driver instance in modile emulation mode
            </summary>
            <param name="height">The height of the screen</param>
            <param name="width">The width of the screen</param>
            <param name="userAgent">The user agent returned by the device</param>
            <param name="pixelRatio">The pixel ratio of the screen</param>
            <param name="touch">(Optional Parameter) Whether touch actions are enabled</param>
            <param name="performanceTimings">Whether to obtain performance timings for the browser.</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.WaitForPageToLoad(OpenQA.Selenium.IWebElement)">
            <summary>
            Waits for a page to load
            </summary>
            <param name="element">An element from the previous page. If omitted, the code will wait for the body of the page to be viosible</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.GetPidsOfExistingBrowsersAndDrivers(System.String)">
            <summary>
            Gets the Process IDs for existing browsers and web drivers
            </summary>
            <param name="driverType">Type of driver being used.</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ExtractProcessIdsForCurrentBrowserAndDriver(System.String)">
            <summary>
            Extracts the Process IDs for the current browser and web driver.
            </summary>
            <param name="driverType">Type of driver being used.</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.GetProcessIds(System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Gets the Process IDs for all running executables.
            </summary>
            <param name="pids">A list of Process IDs</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.EstablishDriverSettings">
            <summary>
            Initialises driver settings.
            </summary>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.BrowserProcessName(System.String)">
            <summary>
            Returne the name of the process used by the prowser
            </summary>
            <returns>The name of the browser process</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.DriverProcessName(System.String)">
            <summary>
            Returne the name of the process used by the prowser
            </summary>
            <returns>The name of the browser process</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.InitialiseRatWatch(System.Boolean)">
            <summary>
            Initialises the RatWatch for performance gathering
            </summary>
            <param name="performanceTimings">Whether to collect timings</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.HandleErrors(System.Exception)">
            <summary>
            Handles all caught exceptions
            </summary>
            <param name="ex">Exception which caused the method to be called</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ReturnEncapsulatedDriver">
            <summary>
            Gets a reference to the encapsulated IWebDriver
            </summary>
            <returns>The encapsulated IWebDriver</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.CheckCookieExists(System.String)">
            <summary>
            Checks if a cookie exists
            </summary>
            <param name="cookieName">The name of the cookie to check for</param>
            <returns>A boolean value indicating whether the cookie exists</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.AddCookie(System.String,System.String)">
            <summary>
            Adds a cookie to the browser
            </summary>
            <param name="name">The name of the cookie to add</param>
            <param name="value">The value set within the cookie</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.AddCookie(System.String,System.String,System.String)">
            <summary>
            Adds a cookie to the browser
            </summary>
            <param name="name">The name of the cookie to add</param>
            <param name="value">The value set within the cookie</param>
            <param name="path">The path of the cookie</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.AddCookie(System.String,System.String,System.String,System.DateTime)">
            <summary>
            Adds a cookie to the browser
            </summary>
            <param name="name">The name of the cookie to add</param>
            <param name="value">The value set within the cookie</param>
            <param name="path">The path of the cookie</param>
            <param name="expiry">The date and time at which the cookie expires</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.AddCookie(System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
            Adds a cookie to the browser
            </summary>
            <param name="name">The name of the cookie to add</param>
            <param name="value">The value set within the cookie</param>
            <param name="domain">The domain for which the cookie is being added</param>
            <param name="path">The path of the cookie</param>
            <param name="expiry">The date and time at which the cookie expires</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.AddCookie(OpenQA.Selenium.Cookie)">
            <summary>
            Adds a predefined cookie to the current browser session
            </summary>
            <param name="cookie">The cookie to be added</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.GetCookies">
            <summary>
            Gets a list of cookies currently saved by the browser
            </summary>
            <returns>The list of cookies</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.DeleteAllCookies">
            <summary>
            Deletes all cookies currently found in the browser
            </summary>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.DeleteCookie(OpenQA.Selenium.Cookie)">
            <summary>
            Deletes a cookie, given a copy of that cookie
            </summary>
            <param name="cookie">The definition of the cookie to be deleted</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.DeleteCookieNamed(System.String)">
            <summary>
            Deletes a named cookie
            </summary>
            <param name="cookie">The name of the cookie</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.GetCookieNamed(System.String)">
            <summary>
            Gets a cookie from the browser
            </summary>
            <param name="cookie">The name of the cookie to find</param>
            <returns>The named cookie</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ReplaceCookie(System.String,System.String)">
            <summary>
            Deletes and then replaces a named cookie
            </summary>
            <param name="name">The name of the cookie</param>
            <param name="value">The value to set within the cookie</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ReplaceCookie(System.String,System.String,System.String)">
            <summary>
            Deletes and then replaces a named cookie
            </summary>
            <param name="name">The name of the cookie</param>
            <param name="value">The value to set within the cookie</param>
            <param name="path">The path of the cookie</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ReplaceCookie(System.String,System.String,System.String,System.DateTime)">
            <summary>
            Deletes and then replaces a named cookie
            </summary>
            <param name="name">The name of the cookie</param>
            <param name="value">The value to set within the cookie</param>
            <param name="path">The path of the cookie</param>
            <param name="expiry">The date and time at which the cookie expires</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ReplaceCookie(System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
            Deletes and then replaces a named cookie
            </summary>
            <param name="name">The name of the cookie</param>
            <param name="value">The value to set within the cookie</param>
            <param name="domain">The domain for which the cookie is being added</param>
            <param name="path">The path of the cookie</param>
            <param name="expiry">The date and time at which the cookie expires</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.GetAvailableLogTypes">
            <summary>
            Gets a list of available log types
            </summary>
            <returns>The list of log types</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.GetAvailableLogEntries(System.String)">
            <summary>
            Gets the available log entries for a particular log type
            </summary>
            <param name="logKind">The type of log to consult</param>
            <returns>The list of log entries</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.SetImplicitWait(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the implicit wait via a method.
            </summary>
            <param name="minutes">The number of minutes in the  implicit wait</param>
            <param name="seconds">The number of seconds in the  implicit wait</param>
            <param name="milliseconds">The number of milliseconds in the  implicit wait</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.SetPageLoadTimeout(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the page load timeout via a method.
            </summary>
            <param name="minutes">The number of minutes in the  page load timeout</param>
            <param name="seconds">The number of seconds in the  page load timeout</param>
            <param name="milliseconds">The number of milliseconds in the page load timeout</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.SetScriptTimeout(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the script timeout via a method.
            </summary>
            <param name="minutes">The number of minutes in the script timeout</param>
            <param name="seconds">The number of seconds in the script timeout</param>
            <param name="milliseconds">The number of milliseconds in the script timeout</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.MaximiseView">
            <summary>
            Maximises the current window
            </summary>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.GetWindowPosition">
            <summary>
            Gets the current window position
            </summary>
            <returns>A tuple containing the x and y coordinates of the top left corner of the window</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.GetWindowSize">
            <summary>
            Gets the current window size
            </summary>
            <returns>A tuple containing the width and height of the current window</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ResizeBrowserWindow(System.Int32,System.Int32)">
            <summary>
            Resizes the browser window to the assigned width and height
            </summary>
            <param name="width">The width to assign to the browser</param>
            <param name="height">The height to assign to the browser</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.PressBackButton">
            <summary>
            Presses the back button of the browser
            </summary>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.PressForwardButton">
            <summary>
            Presses the forward button of the browser
            </summary>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.NavigateToPage(System.String)">
            <summary>
            Navigates to a particular website by URL
            </summary>
            <param name="url">The URL of the website to load in the browser</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.NavigateToPage(System.Uri)">
            <summary>
            Navigates to a particular website by URI
            </summary>
            <param name="url">The URI object of the website to load in the browser</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.RefreshBrowser">
            <summary>
            Refreshes the currently selected browser
            </summary>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.CheckPageSourceForText(System.String)">
            <summary>
            Checks the entire html source for the page for a piece of text
            </summary>
            <param name="text">The text to search the page for</param>
            <returns>Whether the page contains the text</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.GetPageSource">
            <summary>
            Gets the source code for the page
            </summary>
            <returns>The Page Source</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ClosePagesAndQuitDriver">
            <summary>
            Closes the browser pages and quits the driver
            </summary>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.IsWindowOpen(System.String)">
            <summary>
            Checks if a window is open, using its window handle
            </summary>
            <param name="window">The window handle to query</param>
            <returns>A true/false value</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.SwitchToActiveWebElement">
            <summary>
            Switches to the currently active WebElement
            </summary>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.SwitchToAlertDialog">
            <summary>
            Switches to the currently active Alert Dialog
            </summary>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.SwitchToDefaultContent">
            <summary>
            Switches to the original frame or window
            </summary>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.SwitchToFrame(System.Int32)">
            <summary>
            Switches to a numbered frame by index
            </summary>
            <param name="frameIndex">The index number for the frame</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.SwitchToFrame(OpenQA.Selenium.IWebElement)">
            <summary>
            Switches to the frame identified by the WebElement
            </summary>
            <param name="frameElement">A WebElement representing the frame to activate</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.SwitchToFrame(OpenQA.Selenium.By)">
            <summary>
            Switches to the frame identified by the WebElement
            </summary>
            <param name="frameLocator">The locator for the WebElement representing the frame to activate</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.SwitchToFrame(System.String)">
            <summary>
            Switches to the frame identified by the WebElement
            </summary>
            <param name="frameName">The name of the frame to activate</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.SwitchToParentFrame">
            <summary>
            Switches to the parent frame of a selected WebElement
            </summary>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.WaitForElementToLoad(OpenQA.Selenium.IWebElement)">
            <summary>
            Waits for an element to be loaded
            </summary>
            <param name="element">The element for which to wait</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.WaitForElementToLoad(OpenQA.Selenium.By)">
            <summary>
            Waits for an element to be loaded
            </summary>
            <param name="locator">The locator for the element for which to wait</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.WaitForElementToLoad(OpenQA.Selenium.IWebElement,System.Int32)">
            <summary>
            Waits for an element to be loaded
            </summary>
            <param name="element">The element for which to wait</param>
            <param name="seconds">Maximum number of seconds to wait</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.WaitForElementToLoad(OpenQA.Selenium.By,System.Int32)">
            <summary>
            Waits for an element to be loaded
            </summary>
            <param name="locator">The locator for the element for which to wait</param>
            <param name="seconds">Maximum number of seconds to wait</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.WaitForInvisibilityOfElement(OpenQA.Selenium.By)">
            <summary>
            Waits for an element to disappear from the DOM
            </summary>
            <param name="locator">The locator for the element for which to wait</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.WaitForInvisibilityOfElementWithText(OpenQA.Selenium.By,System.String)">
            <summary>
            Waits for an element containing text to disappear from the DOM
            </summary>
            <param name="locator">The locator for the element for which to wait</param>
            <param name="text">The text that should be found in the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ClickLink(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Clicks on a WebElement
            </summary>
            <param name="element">The WebElement on which to click</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ClickLink(OpenQA.Selenium.IWebElement,Liberator.Driver.RatClock,System.Boolean)">
            <summary>
            Clicks on a WebElement
            </summary>
            <param name="element">The WebElement on which to click</param>
            <param name="clock">A clock that may be used to set custom timeouts</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ClickLink(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Clicks on a WebElement
            </summary>
            <param name="locator">The locator for the WebElement on which to click</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ClickLink(OpenQA.Selenium.By,Liberator.Driver.RatClock,System.Boolean)">
            <summary>
            Clicks on a WebElement
            </summary>
            <param name="locator">The locator for the WebElement on which to click</param>
            <param name="clock">A clock that may be used to set custom timeouts</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ClickLinkAndWait(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Clicks on a link and waits for a new page to be loaded
            </summary>
            <param name="element">The element on which to click</param>
            <param name="waitForTarget">(Optional parameter) Whether to wait for the cliackability of the target element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ClickLinkAndWait(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Clicks on a link and waits for a new page to be loaded
            </summary>
            <param name="locator">The element on which to click</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.GetElementText(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Gets the text of a WebElement
            </summary>
            <param name="element">The WebElement from which to retrieve text</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>The text of the WebElement</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.GetElementText(OpenQA.Selenium.IWebElement,Liberator.Driver.RatClock,System.Boolean)">
            <summary>
            Gets the text of a WebElement
            </summary>
            <param name="element">The WebElement from which to retrieve text</param>
            <param name="clock">A clock that may be used to set custom timeouts</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>The text of the WebElement</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.GetElementText(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Gets the text of a WebElement
            </summary>
            <param name="locator">The WebElement from which to retrieve text</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>The text of the WebElement</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.GetElementText(OpenQA.Selenium.By,Liberator.Driver.RatClock,System.Boolean)">
            <summary>
            Gets the text of a WebElement
            </summary>
            <param name="locator">The WebElement from which to retrieve text</param>
            <param name="clock">A clock that may be used to set custom timeouts</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>The text of the WebElement</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ElementExists(OpenQA.Selenium.IWebElement)">
            <summary>
            Checks the browser for the presence of a particular WebElement
            </summary>
            <param name="element">The WebElement whose presence is tested</param>
            <returns>True if the WebElement is present; false if the WebElement is not present</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ElementExists(OpenQA.Selenium.By)">
            <summary>
            Checks the browser for the presence of a particular WebElement
            </summary>
            <param name="locator">The locator for the WebElement whose presence is tested</param>
            <returns>True if the WebElement is present; false if the WebElement is not present</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.GetElementAttribute(OpenQA.Selenium.IWebElement,System.String,System.Boolean)">
            <summary>
            Gets an attribute of a WebElement and returns it as text
            </summary>
            <param name="element">The WebElement whose attributes are to be tested</param>
            <param name="attribute">The attribute value to retrieve</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>True if the WebElement is present; false if the WebElement is not present</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.GetElementAttribute(OpenQA.Selenium.IWebElement,System.String,Liberator.Driver.RatClock,System.Boolean)">
            <summary>
            Gets an attribute of a WebElement and returns it as text
            </summary>
            <param name="element">The WebElement whose attributes are to be tested</param>
            <param name="attribute">The attribute value to retrieve</param>
            <param name="clock">A clock that may be used to set custom timeouts</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>The attribute to retrieve</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.GetElementAttribute(OpenQA.Selenium.By,System.String,System.Boolean)">
            <summary>
            Gets an attribute of a WebElement and returns it as text
            </summary>
            <param name="locator">The locator for the WebElement whose attributes are to be tested</param>
            <param name="attribute">The attribute value to retrieve</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>The attribute to retrieve</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.GetElementAttribute(OpenQA.Selenium.By,System.String,Liberator.Driver.RatClock,System.Boolean)">
            <summary>
            Gets an attribute of a WebElement and returns it as text
            </summary>
            <param name="locator">The locator for the WebElement whose attributes are to be tested</param>
            <param name="attribute">The attribute value to retrieve</param>
            <param name="clock">A clock that may be used to set custom timeouts</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>The attribute to retrieve</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindElementByCssSelector(System.String,System.Boolean)">
            <summary>
            Finds an element with a unique CSS Selector
            </summary>
            <param name="cssSelector">The CSS Selector to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A WebElements that has the CSS Selector</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindElementsByCssSelector(System.String,System.Boolean)">
            <summary>
            Finds a list of elements that share a CSS Selector
            </summary>
            <param name="cssSelector">The CSS Selector to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A collection of WebElements that share the CSS Selector</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindSubElementsByCssSelector(System.String,OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a CSS Selector
            </summary>
            <param name="cssSelector">The CSS Selector to search for</param>
            <param name="element">The parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindSubElementsByCssSelector(System.String,OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a CSS Selector
            </summary>
            <param name="cssSelector">The CSS Selector to search for</param>
            <param name="locator">The locator for the parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindElementByClassName(System.String,System.Boolean)">
            <summary>
            Finds a WebElement that has a Class Name
            </summary>
            <param name="className">The Class Name to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A WebElement described by the Class Name</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindElementsByClassName(System.String,System.Boolean)">
            <summary>
            Finds a list of elements that share a Class Name
            </summary>
            <param name="className">The Class Name to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindSubElementsByClassName(System.String,OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a Class Name
            </summary>
            <param name="className">The Class Name to search for</param>
            <param name="element">The parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindSubElementsByClassName(System.String,OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a Class Name
            </summary>
            <param name="className">The Class Name to search for</param>
            <param name="locator">The locator for the parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindElementById(System.String,System.Boolean)">
            <summary>
            Finds a WebElement whose id is as specified
            </summary>
            <param name="id">The id to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A WebElement with the specified id</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindElementByLinkText(System.String,System.Boolean)">
            <summary>
            Finds a WebElement whose link text is as specified
            </summary>
            <param name="linkText">The text to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A WebElement with the specified Link Text</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindElementsByLinkText(System.String,System.Boolean)">
            <summary>
            Finds a list of elements that whose link text is as specified
            </summary>
            <param name="linkText">The text to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindSubElementsByLinkText(System.String,OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement whose link text is as specified
            </summary>
            <param name="linkText">The text to search for</param>
            <param name="element">The parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindSubElementsByLinkText(System.String,OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement whose link text is as specified
            </summary>
            <param name="linkText">The text to search for</param>
            <param name="locator">The locator for the parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindElementByName(System.String,System.Boolean)">
            <summary>
            Finds a WebElement by name
            </summary>
            <param name="name">The name to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A WebElement</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindElementsByName(System.String,System.Boolean)">
            <summary>
            Finds a list of elements that share a name
            </summary>
            <param name="name">The name to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindSubElementsByName(System.String,OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a name
            </summary>
            <param name="name">The name to search for</param>
            <param name="element">The parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindSubElementsByName(System.String,OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a name
            </summary>
            <param name="name">The name to search for</param>
            <param name="locator">The locator for the parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindElementByPartialLinkText(System.String,System.Boolean)">
            <summary>
            Finds a WebElements whose link text is matched in part
            </summary>
            <param name="linkText">The text to find in whole or in part</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A WebElement</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindElementsByPartialLinkText(System.String,System.Boolean)">
            <summary>
            Finds a list of elements whose link text is matched in part
            </summary>
            <param name="linkText">The text to find in whole or in part</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindSubElementsByPartialLinkText(System.String,OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement whose link text is matched in part
            </summary>
            <param name="linkText">The text to find in whole or in part</param>
            <param name="element">The parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindSubElementsByPartialLinkText(System.String,OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement whose link text is matched in part
            </summary>
            <param name="linkText">The text to find in whole or in part</param>
            <param name="locator">The locator for the parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindElementByTag(System.String,System.Boolean)">
            <summary>
            Finds a list of elements that share a tag
            </summary>
            <param name="tagName">The tag to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindElementsByTag(System.String,System.Boolean)">
            <summary>
            Finds a list of elements that share a tag
            </summary>
            <param name="tagName">The tag to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindSubElementsByTag(System.String,OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a tag
            </summary>
            <param name="tagName">The tag to search for</param>
            <param name="element">The parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindSubElementsByTag(System.String,OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share a tag
            </summary>
            <param name="tagName">The tag to search for</param>
            <param name="locator">The locator for the parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindElementByXPath(System.String,System.Boolean)">
            <summary>
            Finds a list of elements that share xpath
            </summary>
            <param name="xpath">The xpath to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindElementsByXPath(System.String,System.Boolean)">
            <summary>
            Finds a list of elements that share an xpath
            </summary>
            <param name="xpath">The xpath to search for</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindSubElementsByXPath(System.String,OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share an xpath
            </summary>
            <param name="xpath">The xpath to search for</param>
            <param name="element">The parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.FindSubElementsByXPath(System.String,OpenQA.Selenium.By,System.Boolean)">
            <summary>
            Finds the child elements of a given WebElement that share an xpath
            </summary>
            <param name="xpath">The xpath to search for</param>
            <param name="locator">The locator for the parent WebElement</param>
            <param name="wait">(Optional parameter) Whether to wait for the cliackability of the element</param>
            <returns>A collection of child WebElements</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ExtractElementFromCollectionByAttribute(OpenQA.Selenium.IWebElement,Liberator.Driver.Enums.EnumLocatorType,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Finds a WebElement identified by an attribite value from a collection of WebElements sharing a parent
            </summary>
            <param name="parentElement">The parent element for the process</param>
            <param name="type">The type of locator to use to fetch the collection</param>
            <param name="locator">The locator value for items in the collection</param>
            <param name="attribute">The HTML attribute to use to find the unique item</param>
            <param name="value">The value of the attribute of the unique item</param>
            <param name="wait">(Optional parameter) Whether to wait for the clickability of the element</param>
            <returns>A web element identified by a locator type and an attribute value</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.ExtractElementFromCollectionByAttribute(OpenQA.Selenium.By,Liberator.Driver.Enums.EnumLocatorType,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Finds a WebElement identified by an attribite value from a collection of WebElements sharing a parent
            </summary>
            <param name="parentLocator">The locator for the parent element for the process</param>
            <param name="type">The type of locator to use to fetch the collection</param>
            <param name="locator">The locator value for items in the collection</param>
            <param name="attribute">The HTML attribute to use to find the unique item</param>
            <param name="value">The value of the attribute of the unique item</param>
            <param name="wait">(Optional parameter) Whether to wait for the clickability of the element</param>
            <returns>A web element identified by a locator type and an attribute value</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.HoverAction(OpenQA.Selenium.By)">
            <summary>
            Provides a hover action for Hover based methods
            </summary>
            <param name="locator">The locator for the WebElement to receive the Hover action</param>
            <returns>An action</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.HoverAction(OpenQA.Selenium.IWebElement)">
            <summary>
            Provides a hover action for Hover based methods
            </summary>
            <param name="element">The WebElement to receive the Hover action</param>
            <returns>An action</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.GetCssValue(OpenQA.Selenium.IWebElement,System.String)">
            <summary>
            Gets a css value from an element
            </summary>
            <param name="element">The element to query</param>
            <param name="attribute">The attribute to query</param>
            <returns>The CSS Value</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.GetCssValue(OpenQA.Selenium.By,System.String)">
            <summary>
            Gets a css value from an element
            </summary>
            <param name="locator">The locator for the element to query</param>
            <param name="attribute">The attribute to query</param>
            <returns>The CSS Value</returns>
        </member>
        <member name="P:Liberator.Driver.RatDriver`1.Id">
            <summary>
            Gets the unique Id of the RatDriver instance
            </summary>
        </member>
        <member name="P:Liberator.Driver.RatDriver`1.Driver">
            <summary>
            The current WebDriver instance
            </summary>
        </member>
        <member name="P:Liberator.Driver.RatDriver`1.DriverName">
            <summary>
            Text name for the driver
            </summary>
        </member>
        <member name="P:Liberator.Driver.RatDriver`1.Element">
            <summary>
            The current WebElement under scrutiny
            </summary>
        </member>
        <member name="P:Liberator.Driver.RatDriver`1.Locator">
            <summary>
            The locator for a WebElement under scrutiny
            </summary>
        </member>
        <member name="P:Liberator.Driver.RatDriver`1.Elements">
            <summary>
            A list of Elements returned to the user by a query
            </summary>
        </member>
        <member name="P:Liberator.Driver.RatDriver`1.Locators">
            <summary>
            A list of Locators returned to the user by a query
            </summary>
        </member>
        <member name="P:Liberator.Driver.RatDriver`1.LastException">
            <summary>
            The last exception thrown by the driver
            </summary>
        </member>
        <member name="P:Liberator.Driver.RatDriver`1.FireFoxProfile">
            <summary>
            The currently selected Firefiox Profile
            </summary>
        </member>
        <member name="P:Liberator.Driver.RatDriver`1.LastPage">
            <summary>
            The last page opened by this incarnation of the driver
            </summary>
        </member>
        <member name="P:Liberator.Driver.RatDriver`1.WindowHandles">
            <summary>
            The current collection of windows by handle
            </summary>
        </member>
        <member name="P:Liberator.Driver.RatDriver`1.HWindow">
            <summary>
            A system reference to hWnd property
            </summary>
        </member>
        <member name="P:Liberator.Driver.RatDriver`1.RatTimerCollection">
            <summary>
            Contains timers for
            </summary>
        </member>
        <member name="P:Liberator.Driver.RatDriver`1.RecordPerformance">
            <summary>
            Whether to record performance statistics
            </summary>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.GetCurrentWindowHandle">
            <summary>
            Gets the Window Handle for the currently selected page
            </summary>
            <returns>A window handle representing a unique reference to a page</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.SwitchToWindow(System.String)">
            <summary>
            Switches to a window, given the name of that window
            </summary>
            <param name="windowName">The name of the window to switch to</param>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.GetBrowserWindowTitle">
            <summary>
            Gets the title of the currently active browser
            </summary>
            <returns>The name of the currently active window</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.GetBrowserWindowUrl">
            <summary>
            Gets the URL in the currently active browser window
            </summary>
            <returns>The URL for the browser</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.GetAllWindowHandles">
            <summary>
            Gets a list of WindowHandles for all windows under the control of the current driver session
            </summary>
            <returns>A collection of WindowHandles</returns>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.OpenNewView">
            <summary>
            Opens a new window using the send keys command
            </summary>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.CloseView">
            <summary>
            Closes the currently selected window
            </summary>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.TerminateBrowserProcess">
            <summary>
            Terminates the browser process attached to the current web driver
            </summary>
        </member>
        <member name="M:Liberator.Driver.RatDriver`1.TerminateDriverProcess">
            <summary>
            Terminates the driver process attached to the current web driver
            </summary>
        </member>
        <member name="T:Liberator.ExpectedConditions">
            <summary>
            Supplies a set of common conditions that can be waited for using WebDriverWait
            </summary>
            <example>
            <code>
            IWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(3))
            IWebElement element = wait.Until(ExpectedConditions.ElementExists(By.Id("foo")));
            </code>
            </example>
        </member>
        <member name="M:Liberator.ExpectedConditions.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Liberator.ExpectedConditions"/> class from being created.
            </summary>
        </member>
        <member name="M:Liberator.ExpectedConditions.TitleIs(System.String)">
            <summary>
            An expectation for checking the title of a page.
            </summary>
            <param name="title">The expected title, which must be an exact match.</param>
            <returns><see langword="true"/> when the title matches; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.TitleContains(System.String)">
            <summary>
            An expectation for checking that the title of a page contains a case-sensitive substring.
            </summary>
            <param name="title">The fragment of title expected.</param>
            <returns><see langword="true"/> when the title matches; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.UrlToBe(System.String)">
            <summary>
            An expectation for the URL of the current page to be a specific URL.
            </summary>
            <param name="url">The URL that the page should be on</param>
            <returns><see langword="true"/> when the URL is what it should be; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.UrlContains(System.String)">
            <summary>
            An expectation for the URL of the current page to be a specific URL.
            </summary>
            <param name="fraction">The fraction of the url that the page should be on</param>
            <returns><see langword="true"/> when the URL contains the text; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.UrlMatches(System.String)">
            <summary>
            An expectation for the URL of the current page to be a specific URL.
            </summary>
            <param name="regex">The regular expression that the URL should match</param>
            <returns><see langword="true"/> if the URL matches the specified regular expression; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.ElementExists(OpenQA.Selenium.By)">
            <summary>
            An expectation for checking that an element is present on the DOM of a
            page. This does not necessarily mean that the element is visible.
            </summary>
            <param name="locator">The locator used to find the element.</param>
            <returns>The <see cref="T:OpenQA.Selenium.IWebElement"/> once it is located.</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.ElementIsVisible(OpenQA.Selenium.By)">
            <summary>
            An expectation for checking that an element is present on the DOM of a page
            and visible. Visibility means that the element is not only displayed but
            also has a height and width that is greater than 0.
            </summary>
            <param name="locator">The locator used to find the element.</param>
            <returns>The <see cref="T:OpenQA.Selenium.IWebElement"/> once it is located and visible.</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.VisibilityOfAllElementsLocatedBy(OpenQA.Selenium.By)">
            <summary>
            An expectation for checking that all elements present on the web page that
            match the locator are visible. Visibility means that the elements are not
            only displayed but also have a height and width that is greater than 0.
            </summary>
            <param name="locator">The locator used to find the element.</param>
            <returns>The list of <see cref="T:OpenQA.Selenium.IWebElement"/> once it is located and visible.</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.VisibilityOfAllElementsLocatedBy(System.Collections.ObjectModel.ReadOnlyCollection{OpenQA.Selenium.IWebElement})">
            <summary>
            An expectation for checking that all elements present on the web page that
            match the locator are visible. Visibility means that the elements are not
            only displayed but also have a height and width that is greater than 0.
            </summary>
            <param name="elements">list of WebElements</param>
            <returns>The list of <see cref="T:OpenQA.Selenium.IWebElement"/> once it is located and visible.</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.PresenceOfAllElementsLocatedBy(OpenQA.Selenium.By)">
            <summary>
            An expectation for checking that all elements present on the web page that
            match the locator.
            </summary>
            <param name="locator">The locator used to find the element.</param>
            <returns>The list of <see cref="T:OpenQA.Selenium.IWebElement"/> once it is located.</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.TextToBePresentInElement(OpenQA.Selenium.IWebElement,System.String)">
            <summary>
            An expectation for checking if the given text is present in the specified element.
            </summary>
            <param name="element">The WebElement</param>
            <param name="text">Text to be present in the element</param>
            <returns><see langword="true"/> once the element contains the given text; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.TextToBePresentInElementLocated(OpenQA.Selenium.By,System.String)">
            <summary>
            An expectation for checking if the given text is present in the element that matches the given locator.
            </summary>
            <param name="locator">The locator used to find the element.</param>
            <param name="text">Text to be present in the element</param>
            <returns><see langword="true"/> once the element contains the given text; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.TextToBePresentInElementValue(OpenQA.Selenium.IWebElement,System.String)">
            <summary>
            An expectation for checking if the given text is present in the specified elements value attribute.
            </summary>
            <param name="element">The WebElement</param>
            <param name="text">Text to be present in the element</param>
            <returns><see langword="true"/> once the element contains the given text; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.TextToBePresentInElementValue(OpenQA.Selenium.By,System.String)">
            <summary>
            An expectation for checking if the given text is present in the specified elements value attribute.
            </summary>
            <param name="locator">The locator used to find the element.</param>
            <param name="text">Text to be present in the element</param>
            <returns><see langword="true"/> once the element contains the given text; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.FrameToBeAvailableAndSwitchToIt(System.String)">
            <summary>
            An expectation for checking whether the given frame is available to switch
            to. If the frame is available it switches the given driver to the
            specified frame.
            </summary>
            <param name="frameLocator">Used to find the frame (id or name)</param>
            <returns><see cref="T:OpenQA.Selenium.IWebDriver"/></returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.FrameToBeAvailableAndSwitchToIt(OpenQA.Selenium.By)">
            <summary>
            An expectation for checking whether the given frame is available to switch
            to. If the frame is available it switches the given driver to the
            specified frame.
            </summary>
            <param name="locator">Locator for the Frame</param>
            <returns><see cref="T:OpenQA.Selenium.IWebDriver"/></returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.InvisibilityOfElementLocated(OpenQA.Selenium.By)">
            <summary>
            An expectation for checking that an element is either invisible or not present on the DOM.
            </summary>
            <param name="locator">The locator used to find the element.</param>
            <returns><see langword="true"/> if the element is not displayed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.InvisibilityOfElementWithText(OpenQA.Selenium.By,System.String)">
            <summary>
            An expectation for checking that an element with text is either invisible or not present on the DOM.
            </summary>
            <param name="locator">The locator used to find the element.</param>
            <param name="text">Text of the element</param>
            <returns><see langword="true"/> if the element is not displayed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.ElementToBeClickable(OpenQA.Selenium.By)">
            <summary>
            An expectation for checking an element is visible and enabled such that you
            can click it.
            </summary>
            <param name="locator">The locator used to find the element.</param>
            <returns>The <see cref="T:OpenQA.Selenium.IWebElement"/> once it is located and clickable (visible and enabled).</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.ElementToBeClickable(OpenQA.Selenium.IWebElement)">
            <summary>
            An expectation for checking an element is visible and enabled such that you
            can click it.
            </summary>
            <param name="element">The element.</param>
            <returns>The <see cref="T:OpenQA.Selenium.IWebElement"/> once it is clickable (visible and enabled).</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.StalenessOf(OpenQA.Selenium.IWebElement)">
            <summary>
            Wait until an element is no longer attached to the DOM.
            </summary>
            <param name="element">The element.</param>
            <returns><see langword="false"/> is the element is still attached to the DOM; otherwise, <see langword="true"/>.</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.ElementToBeSelected(OpenQA.Selenium.IWebElement)">
            <summary>
            An expectation for checking if the given element is selected.
            </summary>
            <param name="element">The element.</param>
            <returns><see langword="true"/> given element is selected.; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.ElementToBeSelected(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            An expectation for checking if the given element is in correct state.
            </summary>
            <param name="element">The element.</param>
            <param name="selected">selected or not selected</param>
            <returns><see langword="true"/> given element is in correct state.; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.ElementSelectionStateToBe(OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            An expectation for checking if the given element is in correct state.
            </summary>
            <param name="element">The element.</param>
            <param name="selected">selected or not selected</param>
            <returns><see langword="true"/> given element is in correct state.; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.ElementToBeSelected(OpenQA.Selenium.By)">
            <summary>
            An expectation for checking if the given element is selected.
            </summary>
            <param name="locator">The locator used to find the element.</param>
            <returns><see langword="true"/> given element is selected.; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.ElementSelectionStateToBe(OpenQA.Selenium.By,System.Boolean)">
            <summary>
            An expectation for checking if the given element is in correct state.
            </summary>
            <param name="locator">The locator used to find the element.</param>
            <param name="selected">selected or not selected</param>
            <returns><see langword="true"/> given element is in correct state.; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.AlertIsPresent">
            <summary>
            An expectation for checking the AlterIsPresent
            </summary>
            <returns>Alert </returns>
        </member>
        <member name="M:Liberator.ExpectedConditions.AlertState(System.Boolean)">
            <summary>
            An expectation for checking the Alert State
            </summary>
            <param name="state">A value indicating whether or not an alert should be displayed in order to meet this condition.</param>
            <returns><see langword="true"/> alert is in correct state present or not present; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:SeleniumExtras.PageObjects.ByAll">
            <summary>
            Mechanism used to locate elements within a document using a series of lookups. This class will
            find all DOM elements that matches all of the locators in sequence, e.g.
            </summary>
            <example>
            The following code will find all elements that match by1 and then all elements that also match by2.
            <code>
            driver.findElements(new ByAll(by1, by2))
            </code>
            This means that the list of elements returned may not be in document order.
            </example>>
        </member>
        <member name="M:SeleniumExtras.PageObjects.ByAll.#ctor(OpenQA.Selenium.By[])">
            <summary>
            Initializes a new instance of the <see cref="T:SeleniumExtras.PageObjects.ByAll"/> class with one or more <see cref="T:OpenQA.Selenium.By"/> objects.
            </summary>
            <param name="bys">One or more <see cref="T:OpenQA.Selenium.By"/> references</param>
        </member>
        <member name="M:SeleniumExtras.PageObjects.ByAll.FindElement(OpenQA.Selenium.ISearchContext)">
            <summary>
            Find a single element.
            </summary>
            <param name="context">Context used to find the element.</param>
            <returns>The element that matches</returns>
        </member>
        <member name="M:SeleniumExtras.PageObjects.ByAll.FindElements(OpenQA.Selenium.ISearchContext)">
            <summary>
            Finds many elements
            </summary>
            <param name="context">Context used to find the element.</param>
            <returns>A readonly collection of elements that match.</returns>
        </member>
        <member name="M:SeleniumExtras.PageObjects.ByAll.ToString">
            <summary>
            Writes out a comma separated list of the <see cref="T:OpenQA.Selenium.By"/> objects used in the chain.
            </summary>
            <returns>Converts the value of this instance to a <see cref="T:System.String"/></returns>
        </member>
        <member name="T:SeleniumExtras.PageObjects.ByChained">
            <summary>
            Mechanism used to locate elements within a document using a series of other lookups.  This class
            will find all DOM elements that matches each of the locators in sequence
            </summary>
            <example>
            The following code will will find all elements that match by2 and appear under an element that matches
            by1.
            <code>
            driver.findElements(new ByChained(by1, by2))
            </code>
            </example>
        </member>
        <member name="M:SeleniumExtras.PageObjects.ByChained.#ctor(OpenQA.Selenium.By[])">
            <summary>
            Initializes a new instance of the <see cref="T:SeleniumExtras.PageObjects.ByChained"/> class with one or more <see cref="T:OpenQA.Selenium.By"/> objects.
            </summary>
            <param name="bys">One or more <see cref="T:OpenQA.Selenium.By"/> references</param>
        </member>
        <member name="M:SeleniumExtras.PageObjects.ByChained.FindElement(OpenQA.Selenium.ISearchContext)">
            <summary>
            Find a single element.
            </summary>
            <param name="context">Context used to find the element.</param>
            <returns>The element that matches</returns>
        </member>
        <member name="M:SeleniumExtras.PageObjects.ByChained.FindElements(OpenQA.Selenium.ISearchContext)">
            <summary>
            Finds many elements
            </summary>
            <param name="context">Context used to find the element.</param>
            <returns>A readonly collection of elements that match.</returns>
        </member>
        <member name="M:SeleniumExtras.PageObjects.ByChained.ToString">
            <summary>
            Writes out a comma separated list of the <see cref="T:OpenQA.Selenium.By"/> objects used in the chain.
            </summary>
            <returns>Converts the value of this instance to a <see cref="T:System.String"/></returns>
        </member>
        <member name="T:SeleniumExtras.PageObjects.ByFactory">
            <summary>
            Provides instances of the <see cref="T:OpenQA.Selenium.By"/> object to the attributes.
            </summary>
        </member>
        <member name="M:SeleniumExtras.PageObjects.ByFactory.From(SeleniumExtras.PageObjects.FindsByAttribute)">
            <summary>
            Gets an instance of the <see cref="T:OpenQA.Selenium.By"/> class based on the specified attribute.
            </summary>
            <param name="attribute">The <see cref="T:SeleniumExtras.PageObjects.FindsByAttribute"/> describing how to find the element.</param>
            <returns>An instance of the <see cref="T:OpenQA.Selenium.By"/> class.</returns>
        </member>
        <member name="T:SeleniumExtras.PageObjects.ByIdOrName">
            <summary>
            Finds element when the id or the name attribute has the specified value.
            </summary>
        </member>
        <member name="M:SeleniumExtras.PageObjects.ByIdOrName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SeleniumExtras.PageObjects.ByIdOrName"/> class.
            </summary>
            <param name="elementIdentifier">The ID or Name to use in finding the element.</param>
        </member>
        <member name="M:SeleniumExtras.PageObjects.ByIdOrName.FindElement(OpenQA.Selenium.ISearchContext)">
            <summary>
            Find a single element.
            </summary>
            <param name="context">Context used to find the element.</param>
            <returns>The element that matches</returns>
        </member>
        <member name="M:SeleniumExtras.PageObjects.ByIdOrName.FindElements(OpenQA.Selenium.ISearchContext)">
            <summary>
            Finds many elements
            </summary>
            <param name="context">Context used to find the element.</param>
            <returns>A readonly collection of elements that match.</returns>
        </member>
        <member name="M:SeleniumExtras.PageObjects.ByIdOrName.ToString">
            <summary>
            Writes out a description of this By object.
            </summary>
            <returns>Converts the value of this instance to a <see cref="T:System.String"/></returns>
        </member>
        <member name="T:SeleniumExtras.PageObjects.CacheLookupAttribute">
            <summary>
            Marks the element so that lookups to the browser page are cached. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:SeleniumExtras.PageObjects.DefaultElementLocator">
            <summary>
            A default locator for elements for use with the <see cref="T:SeleniumExtras.PageObjects.PageFactory"/>. This locator
            implements no retry logic for elements not being found, nor for elements being stale.
            </summary>
        </member>
        <member name="M:SeleniumExtras.PageObjects.DefaultElementLocator.#ctor(OpenQA.Selenium.ISearchContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SeleniumExtras.PageObjects.DefaultElementLocator"/> class.
            </summary>
            <param name="searchContext">The <see cref="T:OpenQA.Selenium.ISearchContext"/> used by this locator
            to locate elements.</param>
        </member>
        <member name="P:SeleniumExtras.PageObjects.DefaultElementLocator.SearchContext">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.ISearchContext"/> to be used in locating elements.
            </summary>
        </member>
        <member name="M:SeleniumExtras.PageObjects.DefaultElementLocator.LocateElement(System.Collections.Generic.IEnumerable{OpenQA.Selenium.By})">
            <summary>
            Locates an element using the given list of <see cref="T:OpenQA.Selenium.By"/> criteria.
            </summary>
            <param name="bys">The list of methods by which to search for the element.</param>
            <returns>An <see cref="T:OpenQA.Selenium.IWebElement"/> which is the first match under the desired criteria.</returns>
        </member>
        <member name="M:SeleniumExtras.PageObjects.DefaultElementLocator.LocateElements(System.Collections.Generic.IEnumerable{OpenQA.Selenium.By})">
            <summary>
            Locates a list of elements using the given list of <see cref="T:OpenQA.Selenium.By"/> criteria.
            </summary>
            <param name="bys">The list of methods by which to search for the elements.</param>
            <returns>A list of all elements which match the desired criteria.</returns>
        </member>
        <member name="T:SeleniumExtras.PageObjects.DefaultPageObjectMemberDecorator">
            <summary>
            Default decorator determining how members of a class which represent elements in a Page Object
            are detected.
            </summary>
        </member>
        <member name="M:SeleniumExtras.PageObjects.DefaultPageObjectMemberDecorator.Decorate(System.Reflection.MemberInfo,SeleniumExtras.PageObjects.IElementLocator)">
            <summary>
            Locates an element or list of elements for a Page Object member, and returns a
            proxy object for the element or list of elements.
            </summary>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> containing information about
            a class's member.</param>
            <param name="locator">The <see cref="T:SeleniumExtras.PageObjects.IElementLocator"/> used to locate elements.</param>
            <returns>A transparent proxy to the WebDriver element object.</returns>
        </member>
        <member name="M:SeleniumExtras.PageObjects.DefaultPageObjectMemberDecorator.ShouldCacheLookup(System.Reflection.MemberInfo)">
            <summary>
            Determines whether lookups on this member should be cached.
            </summary>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> containing information about
            the member of the Page Object class.</param>
            <returns><see langword="true"/> if lookups are to be cached; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:SeleniumExtras.PageObjects.DefaultPageObjectMemberDecorator.CreateLocatorList(System.Reflection.MemberInfo)">
            <summary>
            Creates a list of <see cref="T:OpenQA.Selenium.By"/> locators based on the attributes of this member.
            </summary>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> containing information about
            the member of the Page Object class.</param>
            <returns>A list of <see cref="T:OpenQA.Selenium.By"/> locators based on the attributes of this member.</returns>
        </member>
        <member name="T:SeleniumExtras.PageObjects.FindsByAllAttribute">
            <summary>
            Marks elements to indicate that found elements should match the criteria of
            all <see cref="T:SeleniumExtras.PageObjects.FindsByAttribute"/> on the field or property.
            </summary>
            <remarks>
            <para>
            When used with a set of <see cref="T:SeleniumExtras.PageObjects.FindsByAttribute"/>, all criteria must be
            matched to be returned. The criteria are used in sequence according to the
            Priority property. Note that the behavior when setting multiple
            <see cref="T:SeleniumExtras.PageObjects.FindsByAttribute"/> Priority properties to the same value, or not
            specifying a Priority value, is undefined.
            </para>
            <para>
            <code>
            // Will find the element with the tag name "input" that also has an ID
            // attribute matching "elementId".
            [FindsByAll]
            [FindsBy(How = How.TagName, Using = "input", Priority = 0)]
            [FindsBy(How = How.Id, Using = "elementId", Priority = 1)]
            public IWebElement thisElement;
            </code>
            </para>
            </remarks>
        </member>
        <member name="T:SeleniumExtras.PageObjects.FindsByAttribute">
             <summary>
             Marks program elements with methods by which to find a corresponding element on the page. Used
             in conjunction with the <see cref="T:SeleniumExtras.PageObjects.PageFactory"/>, it allows you to quickly create Page Objects.
             </summary>
             <remarks>
             <para>
             You can use this attribute by specifying the <see cref="P:SeleniumExtras.PageObjects.FindsByAttribute.How"/> and <see cref="P:SeleniumExtras.PageObjects.FindsByAttribute.Using"/> properties
             to indicate how to find the elements. This attribute can be used to decorate fields and properties
             in your Page Object classes. The <see cref="T:System.Type"/> of the field or property must be either
             <see cref="T:OpenQA.Selenium.IWebElement"/> or IList{IWebElement}. Any other type will throw an
             <see cref="T:System.ArgumentException"/> when <see cref="M:SeleniumExtras.PageObjects.PageFactory.InitElements(OpenQA.Selenium.ISearchContext,System.Object)"/> is called.
             </para>
             <para>
             <code>
             [FindsBy(How = How.Name, Using = "myElementName")]
             public IWebElement foundElement;
            
             [FindsBy(How = How.TagName, Using = "a")]
             public IList{IWebElement} allLinks;
             </code>
             </para>
             <para>
             You can also use multiple instances of this attribute to find an element that may meet
             one of multiple criteria. When using multiple instances, you can specify the order in
             which the criteria is matched by using the <see cref="P:SeleniumExtras.PageObjects.FindsByAttribute.Priority"/> property.
             </para>
             <para>
             <code>
             // Will find the element with the name attribute matching the first of "anElementName"
             // or "differentElementName".
             [FindsBy(How = How.Name, Using = "anElementName", Priority = 0)]
             [FindsBy(How = How.Name, Using = "differentElementName", Priority = 1)]
             public IWebElement thisElement;
             </code>
             </para>
             </remarks>
        </member>
        <member name="P:SeleniumExtras.PageObjects.FindsByAttribute.How">
            <summary>
            Gets or sets the method used to look up the element
            </summary>
        </member>
        <member name="P:SeleniumExtras.PageObjects.FindsByAttribute.Using">
            <summary>
            Gets or sets the value to lookup by (i.e. for How.Name, the actual name to look up)
            </summary>
        </member>
        <member name="P:SeleniumExtras.PageObjects.FindsByAttribute.Priority">
            <summary>
            Gets or sets a value indicating where this attribute should be evaluated relative to other instances
            of this attribute decorating the same class member.
            </summary>
        </member>
        <member name="P:SeleniumExtras.PageObjects.FindsByAttribute.CustomFinderType">
            <summary>
            Gets or sets a value indicating the <see cref="T:System.Type"/> of the custom finder. The custom finder must
            descend from the <see cref="T:OpenQA.Selenium.By"/> class, and expose a public constructor that takes a <see cref="T:System.String"/>
            argument.
            </summary>
        </member>
        <member name="P:SeleniumExtras.PageObjects.FindsByAttribute.Finder">
            <summary>
            Gets or sets an explicit <see cref="T:OpenQA.Selenium.By"/> object to find by.
            Setting this property takes precedence over setting the How or Using properties.
            </summary>
        </member>
        <member name="M:SeleniumExtras.PageObjects.FindsByAttribute.op_Equality(SeleniumExtras.PageObjects.FindsByAttribute,SeleniumExtras.PageObjects.FindsByAttribute)">
            <summary>
            Determines if two <see cref="T:SeleniumExtras.PageObjects.FindsByAttribute"/> instances are equal.
            </summary>
            <param name="one">One instance to compare.</param>
            <param name="two">The other instance to compare.</param>
            <returns><see langword="true"/> if the two instances are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:SeleniumExtras.PageObjects.FindsByAttribute.op_Inequality(SeleniumExtras.PageObjects.FindsByAttribute,SeleniumExtras.PageObjects.FindsByAttribute)">
            <summary>
            Determines if two <see cref="T:SeleniumExtras.PageObjects.FindsByAttribute"/> instances are unequal.
            </summary>s
            <param name="one">One instance to compare.</param>
            <param name="two">The other instance to compare.</param>
            <returns><see langword="true"/> if the two instances are not equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:SeleniumExtras.PageObjects.FindsByAttribute.op_GreaterThan(SeleniumExtras.PageObjects.FindsByAttribute,SeleniumExtras.PageObjects.FindsByAttribute)">
            <summary>
            Determines if one <see cref="T:SeleniumExtras.PageObjects.FindsByAttribute"/> instance is greater than another.
            </summary>
            <param name="one">One instance to compare.</param>
            <param name="two">The other instance to compare.</param>
            <returns><see langword="true"/> if the first instance is greater than the second; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:SeleniumExtras.PageObjects.FindsByAttribute.op_LessThan(SeleniumExtras.PageObjects.FindsByAttribute,SeleniumExtras.PageObjects.FindsByAttribute)">
            <summary>
            Determines if one <see cref="T:SeleniumExtras.PageObjects.FindsByAttribute"/> instance is less than another.
            </summary>
            <param name="one">One instance to compare.</param>
            <param name="two">The other instance to compare.</param>
            <returns><see langword="true"/> if the first instance is less than the second; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:SeleniumExtras.PageObjects.FindsByAttribute.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an
            integer that indicates whether the current instance precedes, follows, or occurs
            in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
            <list type="table">
            <listheader>Value</listheader><listheader>Meaning</listheader>
            <item><description>Less than zero</description><description>This instance precedes <paramref name="obj"/> in the sort order.</description></item>
            <item><description>Zero</description><description>This instance occurs in the same position in the sort order as <paramref name="obj"/>.</description></item>
            <item><description>Greater than zero</description><description>This instance follows <paramref name="obj"/> in the sort order. </description></item>
            </list>
            </returns>
        </member>
        <member name="M:SeleniumExtras.PageObjects.FindsByAttribute.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object">Object</see> is equal
            to the current <see cref="T:System.Object">Object</see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object">Object</see> to compare with the
            current <see cref="T:System.Object">Object</see>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:System.Object">Object</see>
            is equal to the current <see cref="T:System.Object">Object</see>; otherwise,
            <see langword="false"/>.</returns>
        </member>
        <member name="M:SeleniumExtras.PageObjects.FindsByAttribute.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:System.Object">Object</see>.</returns>
        </member>
        <member name="T:SeleniumExtras.PageObjects.FindsBySequenceAttribute">
            <summary>
            Marks elements to indicate that each <see cref="T:SeleniumExtras.PageObjects.FindsByAttribute"/> on the field or
            property should be used in sequence to find the appropriate element.
            </summary>
            <remarks>
            <para>
            When used with a set of <see cref="T:SeleniumExtras.PageObjects.FindsByAttribute"/>, the criteria are used
            in sequence according to the Priority property to find child elements. Note that
            the behavior when setting multiple <see cref="T:SeleniumExtras.PageObjects.FindsByAttribute"/> Priority
            properties to the same value, or not specifying a Priority value, is undefined.
            </para>
            <para>
            <code>
            // Will find the element with the ID attribute matching "elementId", then will find
            // a child element with the ID attribute matching "childElementId".
            [FindsBySequence]
            [FindsBy(How = How.Id, Using = "elementId", Priority = 0)]
            [FindsBy(How = How.Id, Using = "childElementId", Priority = 1)]
            public IWebElement thisElement;
            </code>
            </para>
            </remarks>
        </member>
        <member name="T:SeleniumExtras.PageObjects.How">
            <summary>
            Provides the lookup methods for the FindsBy attribute (for using in PageObjects)
            </summary>
        </member>
        <member name="F:SeleniumExtras.PageObjects.How.Id">
            <summary>
            Finds by <see cref="M:OpenQA.Selenium.By.Id(System.String)" />
            </summary>
        </member>
        <member name="F:SeleniumExtras.PageObjects.How.Name">
            <summary>
            Finds by <see cref="M:OpenQA.Selenium.By.Name(System.String)" />
            </summary>
        </member>
        <member name="F:SeleniumExtras.PageObjects.How.TagName">
            <summary>
            Finds by <see cref="M:OpenQA.Selenium.By.TagName(System.String)" />
            </summary>
        </member>
        <member name="F:SeleniumExtras.PageObjects.How.ClassName">
            <summary>
            Finds by <see cref="M:OpenQA.Selenium.By.ClassName(System.String)" />
            </summary>
        </member>
        <member name="F:SeleniumExtras.PageObjects.How.CssSelector">
            <summary>
            Finds by <see cref="M:OpenQA.Selenium.By.CssSelector(System.String)" />
            </summary>
        </member>
        <member name="F:SeleniumExtras.PageObjects.How.LinkText">
            <summary>
            Finds by <see cref="M:OpenQA.Selenium.By.LinkText(System.String)" />
            </summary>
        </member>
        <member name="F:SeleniumExtras.PageObjects.How.PartialLinkText">
            <summary>
            Finds by <see cref="M:OpenQA.Selenium.By.PartialLinkText(System.String)" />
            </summary>
        </member>
        <member name="F:SeleniumExtras.PageObjects.How.XPath">
            <summary>
            Finds by <see cref="M:OpenQA.Selenium.By.XPath(System.String)" />
            </summary>
        </member>
        <member name="F:SeleniumExtras.PageObjects.How.Custom">
            <summary>
            Finds by a custom implementation.
            </summary>
        </member>
        <member name="T:SeleniumExtras.PageObjects.IElementLocator">
            <summary>
            Interface describing how elements are to be located by a <see cref="T:SeleniumExtras.PageObjects.PageFactory"/>.
            </summary>
            <remarks>
            A locator must always contain a way to retrieve the <see cref="T:OpenQA.Selenium.ISearchContext"/> to
            use in locating elements. In practice, this will usually be implemented by passing
            the context in via a constructor.
            </remarks>
        </member>
        <member name="P:SeleniumExtras.PageObjects.IElementLocator.SearchContext">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.ISearchContext"/> to be used in locating elements.
            </summary>
        </member>
        <member name="M:SeleniumExtras.PageObjects.IElementLocator.LocateElement(System.Collections.Generic.IEnumerable{OpenQA.Selenium.By})">
            <summary>
            Locates an element using the given list of <see cref="T:OpenQA.Selenium.By"/> criteria.
            </summary>
            <param name="bys">The list of methods by which to search for the element.</param>
            <returns>An <see cref="T:OpenQA.Selenium.IWebElement"/> which is the first match under the desired criteria.</returns>
        </member>
        <member name="M:SeleniumExtras.PageObjects.IElementLocator.LocateElements(System.Collections.Generic.IEnumerable{OpenQA.Selenium.By})">
            <summary>
            Locates a list of elements using the given list of <see cref="T:OpenQA.Selenium.By"/> criteria.
            </summary>
            <param name="bys">The list of methods by which to search for the elements.</param>
            <returns>A list of all elements which match the desired criteria.</returns>
        </member>
        <member name="T:SeleniumExtras.PageObjects.IPageObjectMemberDecorator">
            <summary>
            Interface describing how members of a class which represent elements in a Page Object
            are detected.
            </summary>
        </member>
        <member name="M:SeleniumExtras.PageObjects.IPageObjectMemberDecorator.Decorate(System.Reflection.MemberInfo,SeleniumExtras.PageObjects.IElementLocator)">
            <summary>
            Locates an element or list of elements for a Page Object member, and returns a
            proxy object for the element or list of elements.
            </summary>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> containing information about
            a class's member.</param>
            <param name="locator">The <see cref="T:SeleniumExtras.PageObjects.IElementLocator"/> used to locate elements.</param>
            <returns>A transparent proxy to the WebDriver element object.</returns>
        </member>
        <member name="T:SeleniumExtras.PageObjects.PageFactory">
            <summary>
            Provides the ability to produce Page Objects modeling a page. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SeleniumExtras.PageObjects.PageFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeleniumExtras.PageObjects.PageFactory"/> class.
            Private constructor prevents a default instance from being created.
            </summary>
        </member>
        <member name="M:SeleniumExtras.PageObjects.PageFactory.InitElements``1(OpenQA.Selenium.IWebDriver)">
            <summary>
            Initializes the elements in the Page Object with the given type.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the Page Object class.</typeparam>
            <param name="driver">The <see cref="T:OpenQA.Selenium.IWebDriver"/> instance used to populate the page.</param>
            <returns>An instance of the Page Object class with the elements initialized.</returns>
            <remarks>
            The class used in the <typeparamref name="T"/> argument must have a public constructor
            that takes a single argument of type <see cref="T:OpenQA.Selenium.IWebDriver"/>. This helps to enforce
            best practices of the Page Object pattern, and encapsulates the driver into the Page
            Object so that it can have no external WebDriver dependencies.
            </remarks>
            <exception cref="T:System.ArgumentException">
            thrown if no constructor to the class can be found with a single IWebDriver argument
            <para>-or-</para>
            if a field or property decorated with the <see cref="T:SeleniumExtras.PageObjects.FindsByAttribute"/> is not of type
            <see cref="T:OpenQA.Selenium.IWebElement"/> or IList{IWebElement}.
            </exception>
        </member>
        <member name="M:SeleniumExtras.PageObjects.PageFactory.InitElements``1(SeleniumExtras.PageObjects.IElementLocator)">
            <summary>
            Initializes the elements in the Page Object with the given type.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the Page Object class.</typeparam>
            <param name="locator">The <see cref="T:SeleniumExtras.PageObjects.IElementLocator"/> implementation that
            determines how elements are located.</param>
            <returns>An instance of the Page Object class with the elements initialized.</returns>
            <remarks>
            The class used in the <typeparamref name="T"/> argument must have a public constructor
            that takes a single argument of type <see cref="T:OpenQA.Selenium.IWebDriver"/>. This helps to enforce
            best practices of the Page Object pattern, and encapsulates the driver into the Page
            Object so that it can have no external WebDriver dependencies.
            </remarks>
            <exception cref="T:System.ArgumentException">
            thrown if no constructor to the class can be found with a single IWebDriver argument
            <para>-or-</para>
            if a field or property decorated with the <see cref="T:SeleniumExtras.PageObjects.FindsByAttribute"/> is not of type
            <see cref="T:OpenQA.Selenium.IWebElement"/> or IList{IWebElement}.
            </exception>
        </member>
        <member name="M:SeleniumExtras.PageObjects.PageFactory.InitElements(OpenQA.Selenium.ISearchContext,System.Object)">
            <summary>
            Initializes the elements in the Page Object.
            </summary>
            <param name="driver">The driver used to find elements on the page.</param>
            <param name="page">The Page Object to be populated with elements.</param>
            <exception cref="T:System.ArgumentException">
            thrown if a field or property decorated with the <see cref="T:SeleniumExtras.PageObjects.FindsByAttribute"/> is not of type
            <see cref="T:OpenQA.Selenium.IWebElement"/> or IList{IWebElement}.
            </exception>
        </member>
        <member name="M:SeleniumExtras.PageObjects.PageFactory.InitElements(OpenQA.Selenium.ISearchContext,System.Object,SeleniumExtras.PageObjects.IPageObjectMemberDecorator)">
            <summary>
            Initializes the elements in the Page Object.
            </summary>
            <param name="driver">The driver used to find elements on the page.</param>
            <param name="page">The Page Object to be populated with elements.</param>
            <param name="decorator">The <see cref="T:SeleniumExtras.PageObjects.IPageObjectMemberDecorator"/> implementation that
            determines how Page Object members representing elements are discovered and populated.</param>
            <exception cref="T:System.ArgumentException">
            thrown if a field or property decorated with the <see cref="T:SeleniumExtras.PageObjects.FindsByAttribute"/> is not of type
            <see cref="T:OpenQA.Selenium.IWebElement"/> or IList{IWebElement}.
            </exception>
        </member>
        <member name="M:SeleniumExtras.PageObjects.PageFactory.InitElements(System.Object,SeleniumExtras.PageObjects.IElementLocator)">
            <summary>
            Initializes the elements in the Page Object.
            </summary>
            <param name="page">The Page Object to be populated with elements.</param>
            <param name="locator">The <see cref="T:SeleniumExtras.PageObjects.IElementLocator"/> implementation that
            determines how elements are located.</param>
            <exception cref="T:System.ArgumentException">
            thrown if a field or property decorated with the <see cref="T:SeleniumExtras.PageObjects.FindsByAttribute"/> is not of type
            <see cref="T:OpenQA.Selenium.IWebElement"/> or IList{IWebElement}.
            </exception>
        </member>
        <member name="M:SeleniumExtras.PageObjects.PageFactory.InitElements(System.Object,SeleniumExtras.PageObjects.IElementLocator,SeleniumExtras.PageObjects.IPageObjectMemberDecorator)">
            <summary>
            Initializes the elements in the Page Object.
            </summary>
            <param name="page">The Page Object to be populated with elements.</param>
            <param name="locator">The <see cref="T:SeleniumExtras.PageObjects.IElementLocator"/> implementation that
            determines how elements are located.</param>
            <param name="decorator">The <see cref="T:SeleniumExtras.PageObjects.IPageObjectMemberDecorator"/> implementation that
            determines how Page Object members representing elements are discovered and populated.</param>
            <exception cref="T:System.ArgumentException">
            thrown if a field or property decorated with the <see cref="T:SeleniumExtras.PageObjects.FindsByAttribute"/> is not of type
            <see cref="T:OpenQA.Selenium.IWebElement"/> or IList{IWebElement}.
            </exception>
        </member>
        <member name="T:SeleniumExtras.PageObjects.RetryingElementLocator">
            <summary>
            A locator for elements for use with the <see cref="T:SeleniumExtras.PageObjects.PageFactory"/> that retries locating
            the element up to a timeout if the element is not found.
            </summary>
        </member>
        <member name="M:SeleniumExtras.PageObjects.RetryingElementLocator.#ctor(OpenQA.Selenium.ISearchContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SeleniumExtras.PageObjects.RetryingElementLocator"/> class.
            </summary>
            <param name="searchContext">The <see cref="T:OpenQA.Selenium.ISearchContext"/> object that the
            locator uses for locating elements.</param>
        </member>
        <member name="M:SeleniumExtras.PageObjects.RetryingElementLocator.#ctor(OpenQA.Selenium.ISearchContext,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:SeleniumExtras.PageObjects.RetryingElementLocator"/> class.
            </summary>
            <param name="searchContext">The <see cref="T:OpenQA.Selenium.ISearchContext"/> object that the
            locator uses for locating elements.</param>
            <param name="timeout">The <see cref="T:System.TimeSpan"/> indicating how long the locator should
            retry before timing out.</param>
        </member>
        <member name="M:SeleniumExtras.PageObjects.RetryingElementLocator.#ctor(OpenQA.Selenium.ISearchContext,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:SeleniumExtras.PageObjects.RetryingElementLocator"/> class.
            </summary>
            <param name="searchContext">The <see cref="T:OpenQA.Selenium.ISearchContext"/> object that the
            locator uses for locating elements.</param>
            <param name="timeout">The <see cref="T:System.TimeSpan"/> indicating how long the locator should
            retry before timing out.</param>
            <param name="pollingInterval">The <see cref="T:System.TimeSpan"/> indicating how often to poll
            for the existence of the element.</param>
        </member>
        <member name="P:SeleniumExtras.PageObjects.RetryingElementLocator.SearchContext">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.ISearchContext"/> to be used in locating elements.
            </summary>
        </member>
        <member name="M:SeleniumExtras.PageObjects.RetryingElementLocator.LocateElement(System.Collections.Generic.IEnumerable{OpenQA.Selenium.By})">
            <summary>
            Locates an element using the given list of <see cref="T:OpenQA.Selenium.By"/> criteria.
            </summary>
            <param name="bys">The list of methods by which to search for the element.</param>
            <returns>An <see cref="T:OpenQA.Selenium.IWebElement"/> which is the first match under the desired criteria.</returns>
        </member>
        <member name="M:SeleniumExtras.PageObjects.RetryingElementLocator.LocateElements(System.Collections.Generic.IEnumerable{OpenQA.Selenium.By})">
            <summary>
            Locates a list of elements using the given list of <see cref="T:OpenQA.Selenium.By"/> criteria.
            </summary>
            <param name="bys">The list of methods by which to search for the elements.</param>
            <returns>A list of all elements which match the desired criteria.</returns>
        </member>
        <member name="T:SeleniumExtras.PageObjects.WebDriverObjectProxy">
            <summary>
            Represents a base proxy class for objects used with the PageFactory.
            </summary>
        </member>
        <member name="M:SeleniumExtras.PageObjects.WebDriverObjectProxy.#ctor(System.Type,SeleniumExtras.PageObjects.IElementLocator,System.Collections.Generic.IEnumerable{OpenQA.Selenium.By},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SeleniumExtras.PageObjects.WebDriverObjectProxy"/> class.
            </summary>
            <param name="classToProxy">The <see cref="T:System.Type"/> of object for which to create a proxy.</param>
            <param name="locator">The <see cref="T:SeleniumExtras.PageObjects.IElementLocator"/> implementation that
            determines how elements are located.</param>
            <param name="bys">The list of methods by which to search for the elements.</param>
            <param name="cache"><see langword="true"/> to cache the lookup to the element; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="P:SeleniumExtras.PageObjects.WebDriverObjectProxy.Locator">
            <summary>
            Gets the <see cref="T:SeleniumExtras.PageObjects.IElementLocator"/> implementation that determines how elements are located.
            </summary>
        </member>
        <member name="P:SeleniumExtras.PageObjects.WebDriverObjectProxy.Bys">
            <summary>
            Gets the list of methods by which to search for the elements.
            </summary>
        </member>
        <member name="P:SeleniumExtras.PageObjects.WebDriverObjectProxy.Cache">
            <summary>
            Gets a value indicating whether element search results should be cached.
            </summary>
        </member>
        <member name="M:SeleniumExtras.PageObjects.WebDriverObjectProxy.InvokeMethod(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Object)">
            <summary>
            Invokes a method on the object this proxy represents.
            </summary>
            <param name="msg">Message containing the parameters of the method being invoked.</param>
            <param name="representedValue">The object this proxy represents.</param>
            <returns>The <see cref="T:System.Runtime.Remoting.Messaging.ReturnMessage"/> instance as a result of method invocation on the
            object which this proxy represents.</returns>
        </member>
        <member name="T:SeleniumExtras.PageObjects.WebElementListProxy">
            <summary>
            Represents a proxy class for a list of elements to be used with the PageFactory.
            </summary>
        </member>
        <member name="M:SeleniumExtras.PageObjects.WebElementListProxy.#ctor(System.Type,SeleniumExtras.PageObjects.IElementLocator,System.Collections.Generic.IEnumerable{OpenQA.Selenium.By},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SeleniumExtras.PageObjects.WebElementListProxy"/> class.
            </summary>
            <param name="typeToBeProxied">The <see cref="T:System.Type"/> of object for which to create a proxy.</param>
            <param name="locator">The <see cref="T:SeleniumExtras.PageObjects.IElementLocator"/> implementation that
            determines how elements are located.</param>
            <param name="bys">The list of methods by which to search for the elements.</param>
            <param name="cache"><see langword="true"/> to cache the lookup to the element; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="P:SeleniumExtras.PageObjects.WebElementListProxy.ElementList">
            <summary>
            Gets the list of IWebElement objects this proxy represents, returning a cached one if requested.
            </summary>
        </member>
        <member name="M:SeleniumExtras.PageObjects.WebElementListProxy.CreateProxy(System.Type,SeleniumExtras.PageObjects.IElementLocator,System.Collections.Generic.IEnumerable{OpenQA.Selenium.By},System.Boolean)">
            <summary>
            Creates an object used to proxy calls to properties and methods of the
            list of <see cref="T:OpenQA.Selenium.IWebElement"/> objects.
            </summary>
            <param name="classToProxy">The <see cref="T:System.Type"/> of object for which to create a proxy.</param>
            <param name="locator">The <see cref="T:SeleniumExtras.PageObjects.IElementLocator"/> implementation that
            determines how elements are located.</param>
            <param name="bys">The list of methods by which to search for the elements.</param>
            <param name="cacheLookups"><see langword="true"/> to cache the lookup to the
            element; otherwise, <see langword="false"/>.</param>
            <returns>An object used to proxy calls to properties and methods of the
            list of <see cref="T:OpenQA.Selenium.IWebElement"/> objects.</returns>
        </member>
        <member name="M:SeleniumExtras.PageObjects.WebElementListProxy.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            Invokes the method that is specified in the provided <see cref="T:System.Runtime.Remoting.Messaging.IMessage"/> on the
            object that is represented by the current instance.
            </summary>
            <param name="msg">An <see cref="T:System.Runtime.Remoting.Messaging.IMessage"/> that contains an <see cref="T:System.Collections.IDictionary"/>  of
            information about the method call. </param>
            <returns>The message returned by the invoked method, containing the return value and any
            out or ref parameters.</returns>
        </member>
        <member name="T:SeleniumExtras.PageObjects.WebElementProxy">
            <summary>
            Intercepts the request to a single <see cref="T:OpenQA.Selenium.IWebElement"/>
            </summary>
        </member>
        <member name="M:SeleniumExtras.PageObjects.WebElementProxy.#ctor(System.Type,SeleniumExtras.PageObjects.IElementLocator,System.Collections.Generic.IEnumerable{OpenQA.Selenium.By},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SeleniumExtras.PageObjects.WebElementProxy"/> class.
            </summary>
            <param name="classToProxy">The <see cref="T:System.Type"/> of object for which to create a proxy.</param>
            <param name="locator">The <see cref="T:SeleniumExtras.PageObjects.IElementLocator"/> implementation that determines
            how elements are located.</param>
            <param name="bys">The list of methods by which to search for the elements.</param>
            <param name="cache"><see langword="true"/> to cache the lookup to the element; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="P:SeleniumExtras.PageObjects.WebElementProxy.WrappedElement">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.IWebElement"/> wrapped by this object.
            </summary>
        </member>
        <member name="P:SeleniumExtras.PageObjects.WebElementProxy.Element">
            <summary>
            Gets the IWebElement object this proxy represents, returning a cached one if requested.
            </summary>
        </member>
        <member name="M:SeleniumExtras.PageObjects.WebElementProxy.CreateProxy(System.Type,SeleniumExtras.PageObjects.IElementLocator,System.Collections.Generic.IEnumerable{OpenQA.Selenium.By},System.Boolean)">
            <summary>
            Creates an object used to proxy calls to properties and methods of an <see cref="T:OpenQA.Selenium.IWebElement"/> object.
            </summary>
            <param name="classToProxy">The <see cref="T:System.Type"/> of object for which to create a proxy.</param>
            <param name="locator">The <see cref="T:SeleniumExtras.PageObjects.IElementLocator"/> implementation that
            determines how elements are located.</param>
            <param name="bys">The list of methods by which to search for the elements.</param>
            <param name="cacheLookups"><see langword="true"/> to cache the lookup to the element; otherwise, <see langword="false"/>.</param>
            <returns>An object used to proxy calls to properties and methods of the list of <see cref="T:OpenQA.Selenium.IWebElement"/> objects.</returns>
        </member>
        <member name="M:SeleniumExtras.PageObjects.WebElementProxy.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            Invokes the method that is specified in the provided <see cref="T:System.Runtime.Remoting.Messaging.IMessage"/> on the
            object that is represented by the current instance.
            </summary>
            <param name="msg">An <see cref="T:System.Runtime.Remoting.Messaging.IMessage"/> that contains a dictionary of
            information about the method call. </param>
            <returns>The message returned by the invoked method, containing the return value and any
            out or ref parameters.</returns>
        </member>
    </members>
</doc>
